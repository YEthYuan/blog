{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/archive.jpg","path":"img/archive.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/default.jpg","path":"img/default.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface1.jpg","path":"img/postface1.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface0.jpg","path":"img/postface0.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface2.jpg","path":"img/postface2.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface3.jpg","path":"img/postface3.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface4.jpg","path":"img/postface4.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface5.jpg","path":"img/postface5.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface7.jpg","path":"img/postface7.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface8.jpg","path":"img/postface8.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface6.jpg","path":"img/postface6.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/postface9.jpg","path":"img/postface9.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/topimg.jpg","path":"img/topimg.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/custom/center-radar.css","path":"css/custom/center-radar.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Cpp-STL.md","hash":"d75e51794762bc6ac488e5817a767436a3613f8e","modified":1647342206000},{"_id":"source/_posts/article-title.md","hash":"6fd079e680bd3529411ff502887bd765401ed359","modified":1647168629712},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1647342206000},{"_id":"source/_posts/算法竞赛代码片段记录.md","hash":"85bf77be37731a8c5a0fbeb55458867be5207e01","modified":1647342206000},{"_id":"source/_posts/编译原理-LL1文法总结.md","hash":"318107cc84c6c72d4b92116cce4ca705cb79659b","modified":1647342206000},{"_id":"source/_posts/计算机网络-五层协议整理.md","hash":"8f5e8eff8c014ea8aea821b46d20969d6175f76f","modified":1647342206000},{"_id":"source/categories/index.md","hash":"567326614c6de9ce9f928c51a3a508bf7f27e7f3","modified":1647169681047},{"_id":"source/link/index.md","hash":"8b28066662c65a9c8e2cbaec1a52fa7185d20b6d","modified":1647169700609},{"_id":"source/tags/index.md","hash":"55f0281f30754317bda411b8de94133dba0bb724","modified":1647169655303},{"_id":"source/_data/link.yml","hash":"16980242959954fbcefef3ee005bb7767f4cd0d0","modified":1647342206000},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1667146250000},{"_id":"themes/butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1667146250000},{"_id":"themes/butterfly/package.json","hash":"513295c02e8b78606be2c3993f5068c928189467","modified":1667146250000},{"_id":"themes/butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1667146250000},{"_id":"themes/butterfly/_config.yml","hash":"cba39267415c11494c77be1911c144216ef91ae8","modified":1667809504340},{"_id":"themes/butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1667146250000},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1667146250000},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1647169020686},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1667146250000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1667146250000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1667146250000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1667146250000},{"_id":"themes/butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1667146250000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1667146250000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1647169020686},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1647169020687},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1647169020685},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1667146250000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1667146250000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1647169020684},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"346b6b650b9dee4844f3be7865886002f82da24c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"919020d4cd7ae68694b2326edeed4328c7f933cd","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"7dee9b73acdec2a34d41a45119ebe8bb8650bf6c","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/config.js","hash":"e959cd313fc20c62fe23f0a7cba3d350d6131d66","modified":1647169020784},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1667146250000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1667146250000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1667146250000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"763dab5c83f50c1c62fffc9a9dfedea29bb4e629","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1667146250000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1667146250000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1647169020840},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1647169020841},{"_id":"themes/butterfly/source/css/var.styl","hash":"e018dad9f674fc5564112b99032fe5fe8b2d195f","modified":1667146250000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1647169020842},{"_id":"themes/butterfly/source/img/avatar.jpg","hash":"0b73cb60040e32fa928893cd93911f6226b71ce8","modified":1647224984845},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"fe4d847177b824e09c75e9c7b723184c708c569a","modified":1667146250000},{"_id":"themes/butterfly/source/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1667146250000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"2df5a033104775ee9c8715925bb32c3ec5b75da0","modified":1667146250000},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1647169020717},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1647169020717},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"aa175e2254704335f4da09175e59ef2375ca7d03","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1647169020720},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"6ae047d566289294cc2f6192cacbff297cec9f1a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e3d574921fca8e756923bf3b303835e57b9a26b2","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"142621f70bedcb5033ee99a988f7bb6c5eea3493","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1667146250000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1667146250000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"a0010d833ed30211601c1e0bbbc68e85b77428c6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"a457a0dbe23af21a7b6b8bfc5ee103c9fe92e89c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1667146250000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1667146250000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1667146250000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"8c90483d461e09cb06e91b16d8bb7b3205b0a40c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1667146250000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1667146250000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1667146250000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1667146250000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1667146250000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"98ef20f8a3b10c1692f9b2b3c06033d2da8a8eae","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"1c846c8d51649b8554d91536323eaeb20c8fc236","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1667146250000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1667146250000},{"_id":"themes/butterfly/source/img/default.jpg","hash":"c9ff38499391bc4ed09be35df4cad472e00c7c0d","modified":1647223172126},{"_id":"themes/butterfly/source/img/postface9.jpg","hash":"7f20e51b96339eade589edfc5306913e7d34cfd2","modified":1647233583064},{"_id":"themes/butterfly/source/img/postface5.jpg","hash":"4ae37ab165cc5ff40b503a7e7eaaf85203b0dd06","modified":1647233518073},{"_id":"themes/butterfly/source/img/postface4.jpg","hash":"a852cecff2f8dd91380cf06a25cf902b4a598f10","modified":1647233505122},{"_id":"themes/butterfly/source/img/postface1.jpg","hash":"21b4138c30c1c47d9acef89a78c5c6ae78a516d2","modified":1647233470040},{"_id":"themes/butterfly/source/img/topimg.jpg","hash":"4a46163da25ab4e66719f4bbafa9a90de50dd2cd","modified":1647169479035},{"_id":"themes/butterfly/source/img/postface7.jpg","hash":"7e6e7fd2164a8ed4162dabec930fa6b075fceba8","modified":1647233552643},{"_id":"themes/butterfly/source/img/postface0.jpg","hash":"d4b434223a09b97f55c36ae9ce466aa3f1f431ee","modified":1647233613008},{"_id":"themes/butterfly/source/img/postface8.jpg","hash":"8bb7446dfb754f7ec5e3793f3b42785b919a2031","modified":1647233571669},{"_id":"themes/butterfly/source/img/postface2.jpg","hash":"9695d351f27257325d381cf70a088c4fa025ad4b","modified":1647233483523},{"_id":"themes/butterfly/source/img/postface6.jpg","hash":"6f2eec51dc51e7e4b5d7d06dd31ca263f4d0315d","modified":1647233525958},{"_id":"themes/butterfly/source/img/archive.jpg","hash":"b0fb7fe3ed005dca0aa2d1c57a07d65c4abe5f3e","modified":1647171083100},{"_id":"themes/butterfly/source/img/postface3.jpg","hash":"c55c793f03369743651c753ff9cc6c0cf6dca8f9","modified":1647233493297},{"_id":"public/link/index.html","hash":"d0d46a62cf1f616a8c3756bbeb20706a296d960b","modified":1667810504762},{"_id":"public/Cpp-STL.html","hash":"fa9b84119a5db5455c05fc5ffaf5a7c443637265","modified":1667809114174},{"_id":"public/categories/index.html","hash":"5a6c99fda2351ada221f4afc52ccbaa4d1544f10","modified":1667810504762},{"_id":"public/article-title.html","hash":"113ebacae4b07e91050b0f3a9b3b505ed8e9e2f9","modified":1667809114174},{"_id":"public/tags/index.html","hash":"b0132b02c386033033604307e34beb1b4ff0ff5d","modified":1667810504762},{"_id":"public/编译原理-LL1文法总结.html","hash":"c155c1fe5e3fe4565304d1b8eeadc6ab4dab8e14","modified":1667809518691},{"_id":"public/hello-world.html","hash":"383134cbbc5ce2ad71da841b752b335e616a57e7","modified":1667809114174},{"_id":"public/计算机网络-五层协议整理.html","hash":"46b1abd0dc94ace7aa1ead0fc6ac1f19bce6aa76","modified":1667809114174},{"_id":"public/算法竞赛代码片段记录.html","hash":"352246cdb5c73070cf6c86f89472ba7bfbe6e8e9","modified":1667809114174},{"_id":"public/categories/Algorithm/index.html","hash":"d6516f0a050817ded25c831524636d3134041fb6","modified":1667810504762},{"_id":"public/categories/Compiler/index.html","hash":"8fa8b5c8c4e214013b40e9e09ac1df7bbe7b7c39","modified":1667810504762},{"_id":"public/index.html","hash":"a2a30b7945e5d270b4ea26e08fa87ee45e8c0384","modified":1667810504762},{"_id":"public/tags/CN/index.html","hash":"a4c07a2b9b55f2c347d15fc0f8967976bf5d7929","modified":1667810504762},{"_id":"public/categories/Computer-Network/index.html","hash":"175334b9228b075ac81b65fccb53ab9a0d6562c4","modified":1667810504762},{"_id":"public/tags/C/index.html","hash":"1f6bc6bcf3fcca6580ff833f859d81210e01ff57","modified":1667810504762},{"_id":"public/tags/算法/index.html","hash":"869c4f83ce1b3966027a565e2bc4989552b6b9a1","modified":1667810504762},{"_id":"public/tags/知识整理/index.html","hash":"08ae3cd7ae104dcd39580918b84af6be18f3acc5","modified":1667810504762},{"_id":"public/tags/编译原理/index.html","hash":"4f44ff42f7db6724990d9a4471dc3514ad2a5c6b","modified":1667810504762},{"_id":"public/tags/计算机网络/index.html","hash":"c51f01e2546345073cec3020c628ddee9fc27d64","modified":1667810504762},{"_id":"public/archives/index.html","hash":"eeee5450bd66a92efcda9d54e09ec4fa74f965da","modified":1667810504762},{"_id":"public/archives/2021/index.html","hash":"bb98ab3991fb11869d241c4a4a587c380dd584b9","modified":1667810504762},{"_id":"public/archives/2021/12/index.html","hash":"b60166d5035399e58bf210e4bc10876ad2623e7b","modified":1667810504762},{"_id":"public/archives/2022/index.html","hash":"89735da865f871e62d9b9cdda1bc3fb3cea8146d","modified":1667810504762},{"_id":"public/archives/2022/03/index.html","hash":"8b40a8e4faa935c46d8d8e7da18c8bb641c454a6","modified":1667810504762},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1667804593002},{"_id":"public/img/avatar.jpg","hash":"0b73cb60040e32fa928893cd93911f6226b71ce8","modified":1667806237135},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1667804593002},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1667804593002},{"_id":"public/live2dw/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1647342185107},{"_id":"public/live2dw/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1647342185107},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1647342185107},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1647342185107},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667804593002},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1667804593002},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1667804593002},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1667804593002},{"_id":"public/css/index.css","hash":"c97b4ff3135568f80855a695b3bd26323a579a01","modified":1667804593002},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1667804593002},{"_id":"public/js/main.js","hash":"189359400f6cd4d814ca9ebb5a27b96f7031bce3","modified":1667804593002},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1647342185107},{"_id":"public/live2dw/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1647342185107},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1647342185107},{"_id":"public/live2dw/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1647342185107},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1647342185107},{"_id":"public/img/default.jpg","hash":"c9ff38499391bc4ed09be35df4cad472e00c7c0d","modified":1667806237135},{"_id":"public/img/postface1.jpg","hash":"21b4138c30c1c47d9acef89a78c5c6ae78a516d2","modified":1667806237135},{"_id":"public/img/postface9.jpg","hash":"7f20e51b96339eade589edfc5306913e7d34cfd2","modified":1667806237135},{"_id":"public/img/postface4.jpg","hash":"a852cecff2f8dd91380cf06a25cf902b4a598f10","modified":1667806237135},{"_id":"public/img/postface5.jpg","hash":"4ae37ab165cc5ff40b503a7e7eaaf85203b0dd06","modified":1667806237135},{"_id":"public/img/topimg.jpg","hash":"4a46163da25ab4e66719f4bbafa9a90de50dd2cd","modified":1667806237135},{"_id":"public/img/postface7.jpg","hash":"7e6e7fd2164a8ed4162dabec930fa6b075fceba8","modified":1667806237135},{"_id":"public/img/postface8.jpg","hash":"8bb7446dfb754f7ec5e3793f3b42785b919a2031","modified":1667806237135},{"_id":"public/img/postface0.jpg","hash":"d4b434223a09b97f55c36ae9ce466aa3f1f431ee","modified":1667806237135},{"_id":"public/img/postface2.jpg","hash":"9695d351f27257325d381cf70a088c4fa025ad4b","modified":1667806237135},{"_id":"public/img/postface6.jpg","hash":"6f2eec51dc51e7e4b5d7d06dd31ca263f4d0315d","modified":1667806237135},{"_id":"public/img/archive.jpg","hash":"b0fb7fe3ed005dca0aa2d1c57a07d65c4abe5f3e","modified":1667806237135},{"_id":"public/img/postface3.jpg","hash":"c55c793f03369743651c753ff9cc6c0cf6dca8f9","modified":1667806237135},{"_id":"public/archives/2022/11/index.html","hash":"7f62276343740c3a05d604ab5e85e04aaa6172fe","modified":1667810504762},{"_id":"themes/butterfly/plugins.yml","hash":"d46811a3c50f7057681ac496de4beda107aa26b6","modified":1667146250000},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"ee3e70098eb0849497d50b75e18cf4a27c397d52","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"acfe765fb2c607bff7198630dbfa53a888c36357","modified":1667146250000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"49dcc23815e1d5264bb65c91e7dc67b1a723d1ea","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"c12c898b35dd014780c1f3220ddbe12e7270983c","modified":1667146250000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1667146250000},{"_id":"public/404.html","hash":"f7201696cee242f81a0070783adbbc86be462397","modified":1667810504762},{"_id":"themes/butterfly/source/css/custom/center-radar.css","hash":"5eed72714193f39eed35f1b9df39942d00344176","modified":1667808145102},{"_id":"public/css/custom/center-radar.css","hash":"5eed72714193f39eed35f1b9df39942d00344176","modified":1667808594874}],"Category":[{"name":"Algorithm","_id":"cl0s106bx00045oo401ufa2qu"},{"name":"Compiler","_id":"cl0s106c8000p5oo47hulgdrt"},{"name":"Computer Network","_id":"cl0s106c8000r5oo481lu9oso"}],"Data":[{"_id":"link","data":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}],"Page":[{"title":"link","date":"2022-03-13T11:08:12.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2022-03-13 19:08:12\ntype: \"link\"\n---\n","updated":"2022-03-13T11:08:20.609Z","path":"link/index.html","comments":1,"layout":"page","_id":"cl0s106br00005oo45ye59t3b","content":"","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"cover":"/img/postface5.jpg","excerpt":"","more":""},{"title":"categories","date":"2022-03-13T11:07:50.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-03-13 19:07:50\ntype: \"categories\"\n---\n","updated":"2022-03-13T11:08:01.047Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl0s106bv00025oo48m1y8btx","content":"","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"cover":"/img/postface0.jpg","excerpt":"","more":""},{"title":"tags","date":"2022-03-13T11:07:12.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-03-13 19:07:12\ntype: \"tags\"\n---\n","updated":"2022-03-13T11:07:35.303Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl0s106bz00065oo42a1w6kyt","content":"","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":""}],"Post":[{"title":"C++ STL整理-算法竞赛向","created":"2021-12-01T20:47:30.000Z","source":"_posts/Cpp-STL.md","author":"Reprinted","toc":true,"mathjax":false,"_content":"\n# 算法竞赛C++ STL详解\n\n---\n\n本蒟蒻写这篇分享的目的一个是为了写一个归纳总结方便自己以后随时能够复习还有就是给那些对STL还不是很了解的萌新介绍一下什么是STL以及如何使用STL更高效(偷懒)地解题。本篇文章将会长期更新~欢迎大家一起监督学习~有错误的地方或者需要补充的欢迎在评论区留言哦~\n\n## 一、什么是STL?\n\nSTL(`Standard Template Library`，标准模板库)，是惠普实验室开发的一系列软件的统称。现主要出现在C++中，STL从广义上分为：容器(`container`)、算法(`algorithm`)和迭代器(`iterator`)。STL几乎所有的代码都采用了**模板类或者模板函数**，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。\n\n## 二、STL六大组件是什么?\n\nSTL提供了六大组件，彼此之间可以组合套用，这六大组件分别是容器、算法、迭代器、仿函数、适配器、空间配置器。其中，在算法竞赛中用到最多的为**容器、算法与迭代器**。\n\n-   容器(`Container`)：STL容器为各种**数据结构**，如`vector`、`stack`、`queue`、`map`、`set`等，用来存放数据，从实现角度来看，STL容器是一种`class template`。\n-   算法(`Algorithm`)：STL的算法多数定义在`<algorithm>`头文件中，其中包括了各种常用的算法，如`sort`、`find`、`copy`、`reverse`等，从实现角度来看，STL算法是一种`function template`。\n-   迭代器(`Iterator`)：STL迭代器扮演了容器与算法之间的胶合剂，共有五种类型，从实现角度来看，迭代器是一种将`opetator*`、`opetator->`、`operator++`等指针相关操作予以重载的`class template`。所有STL容器都附带有自己专属的迭代器，只有容器的设计者才知道如何遍历自己的元素。\n-   仿函数(`Functor`)：行为类似函数，可作为算法的某种策略，从实现角度来看，仿函数是一种重载了`operator()`的`class`或者`class template`。\n-   适配器(`Adaptor`)：一种用来修饰容器或仿函数或迭代器接口的东西。\n-   空间配置器(`Allocator`)：负责空间的配置与管理。从实现角度来看，配置器是一个实现了动态空间配置、空间管理、空间释放的`class template`。\n\n## 三、STL容器详解\n\n相信很多人学习STL就是为了在比赛中能够更好地装B运用各种数据结构和算法，提高解题速度。确实，使用STL中的容器能够不需要自己手写定义各种数据结构，使用STL中的算法能够不需要自己手写实现各种基本算法，因此本部分对于算法巨巨们是最为重要的一部分，那么STL容器究竟有哪些呢?在做题中该如何使用呢?\n\n① `vector`：又称`变长数组`，定义在`<vector>`头文件中，`vector`容器是**动态空间**，随着元素的加入，它的内部机制会自动扩充空间以容纳新的元素。因此`vector`的运用对于内存的合理利用与运用的灵活性有很大的帮助。\n\n-   `vector`的定义方式\n\n```cpp\n    vector<int> v;//定义一个vector，其中的元素为int类型\n    vector<int> v[N];//定义一个vector数组，其中有N个vector\n    vector<int> v(len);//定义一个长度为len的vector\n    vector<int> v(len, x);//定义一个长度为len的vector，初始化每个元素为x\n    vector<int> v2(v1);//用v1给v2赋值，v1的类型为vector\n    vector<int> v2(v1.begin(), v1.begin() + 3);//将v1中第0~2三个元素赋值给v2\n```\n\n-   `vector`的常用内置函数\n\n```cpp\n    //vector中的常用内置函数\n    vector<int> v = { 1, 2, 3 };//初始化vector，v:{1, 2, 3}\n    vector<int>::iterator it = v.begin();//定义vector的迭代器，指向begin()\n\n    v.push_back(4);//在vector的尾部插入元素4，v:{1, 2, 3, 4}\n    v.pop_back();//删除vector的最后一个元素，v:{1, 2, 3}\n    v.size();//返回vector中元素的个数\n    v.empty();//返回vector是否为空，若为空则返回true否则返回false\n    v.front();//返回vector中的第一个元素\n    v.back();//返回vector中的最后一个元素\n    v.begin();//返回vector第一个元素的迭代器\n    v.end();//返回vector最后一个元素后一个位置的迭代器\n    v.clear();//清空vector\n    v.erase(v.begin());//删除迭代器it所指向的元素\n    v.insert(v.begin(), 1);//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器\n\n    //根据下标进行遍历\n    for (int i = 0; i < v.size(); i++)\n        cout << v[i] << ' ';\n    //使用迭代器遍历\n    for (vector<int>::iterator it = v.begin(); it != v.end(); it++)\n        cout << *it << ' ';\n    //for_each遍历(C++11)\n    for (auto x : v)\n        cout << x << ' ';\n```\n\n②`stack`：又称`栈`，是一种**后进先出**(`Last In First Out，LIFO`)的数据结构，定义在`<stack>`头文件中，`stack`容器允许新增元素、移除元素、取得栈顶元素，但是除了最顶端以外，没有任何方法可以存取`stack`的其它元素，换言之，`stack`**不允许有遍历行为**。\n\n-   `stack`的定义方式\n\n```cpp\n    stack<int> stk;//定义一个stack，其中元素的类型为int\n    stack<int> stk[N];//定义一个stack数组，其中有N个stack\n```\n\n-   `stack`的常用内置函数\n\n```cpp\n    //stack中的常用内置函数\n    stack<int> stk;\n    stk.push(x);//在stack中插入元素x\n    stk.pop();//弹出stack的栈顶元素\n    stk.top();//返回stack的栈顶元素\n    stk.size();//返回stack中元素的个数\n    stk.empty();//返回stack是否为空，若为空则返回true否则返回false\n```\n\n③`string`：又称字符串，定义在`<string>`头文件中。C风格的字符串(以空字符结尾的字符数组)太过复杂难于掌握，因此C++标准库定义了一种`string`类。`string`玩得好，天梯和蓝桥拿个国奖真的有手就行。因此熟练地运用`string`还是很重要滴~\n\n-   `string`的定义方式\n\n```cpp\n    string str;//定义一个空的字符串\n    string str[N];//定义一个string数组，其中有N个string\n    string str(5, 'a');//使用5个字符'a'初始化\n    string str(\"abc\");//使用字符串初始化\n```\n\n-   `string`的常用内置函数\n\n```cpp\n //string中的常用内置函数\n    string str(\"abcabc\");\n    str.push_back('d');//在string尾部插入字符，\"abcabcd\"\n    str.pop_back();//删除string尾部的字符，\"abcabc\"\n    str.length();//返回string中字符的个数\n    str.size();//作用与length()相同\n    str.empty();//返回string是否为空，若为空返回true否则返回false\n    str.substr(1);//返回string中从下标为1开始至末尾的子串，\"bc\"\n    str.substr(0, 2);//返回string中从下标为0开始长度为2的子串，\"ab\"\n    str.insert(1, 2, 'x');//在下标为1的字符前插入2个字符'x'，\"axxbcabc\"\n    str.insert(1, \"yy\");//在下标为1的字符前插入字符串\"yy\"，\"ayyxxbcabc\"\n    str.erase(1, 4);//删除从位置1开始的4个字符，\"abcabc\"\n    str.find('b');//返回字符'b'在string中第一次出现的位置，返回1\n    str.find('b', 2);//返回从位置2开始字符'b'在string中第一次出现的位置，返回4\n    str.find(\"bc\");//同上，返回字符串第一次出现的位置，返回1\n    str.find(\"bc\", 2);//返回4\n    str.rfind('b');//反向查找，原理同上，返回4\n    str.rfind('b', 3);//返回1\n    str.rfind(\"bc\");//返回4\n    str.rfind(\"bc\", 3);//返回1\n    str[0];//用下标访问string中的字符\n    cout << (str == str) << endl;//string可比较大小，按字典序\n```\n\n-   `string`的`erase()`与`remove()`函数的用法\n\n```cpp\n    //string中erase()与remove()的用法\n    string str1, str2, str3, str4, str5;\n    str1 = str2 = str3 = str4 = str5 = \"I love AcWing! It's very funny!\";\n    str1.erase(15);//删除[15,end())的所有元素，\"I love AcWing!\"\n    str2.erase(6, 11);//从第6个元素(包括)开始往后删除11个元素，\"I love's very funny!\"\n    str3.erase(str3.begin() + 2);//删除迭代器所指的元素，\"I ove AcWing! It's very funny!\"\n    str4.erase(str4.begin() + 7, str4.end() - 11);//删除[str4.begin()+7,str4.end()-11)的所有元素，\"I love very funny!\"\n    str5.erase(remove(str5.begin(), str5.end(), 'n'), str5.end());//删除[str5.begin(),str5.end())中所有字符'n'，\"I love AcWig! It's very fuy!\"\n```\n\n④`queue`：又称`队列`，是一种**先进先出**(`First In First Out，FIFO`)的数据结构，定义在`<queue>`头文件中，`queue`容器允许从一端(称为`队尾`)新增元素(`入队`)，从另一端(称为`队头`)移除元素(`出队`)。  \n⑤`priority_queue`：又称`优先队列`，同样定义在`<queue>`头文件中，与`queue`不同的地方在于我们可以自定义其中数据的优先级，优先级高的排在队列前面，优先出队。`priority_queue`具有`queue`的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它的本质是用`堆`实现的，因此可分为`小根堆`与`大根堆`，`小根堆`中较小的元素排在前面，`大根堆`中较大的元素排在前面。**注意：创建`priority_queue`时默认是`大根堆`！**\n\n-   `queue`的定义方式\n\n```cpp\n    queue<int> que;//定义一个queue，其中元素的类型为int\n    queue<int> que[N];//定义一个queue数组，其中有N个queue\n    priority_queue<int> bigHeap;//定义一个大根堆\n    priority_queue<int, vector<int>, greater<int> > smallHeap;//定义一个小根堆\n```\n\n-   `queue`的常用内置函数\n\n```cpp\n    //queue中的常用内置函数\n    queue<int> que;\n    que.push(x);//在queue的队尾插入元素x\n    que.pop();//出队queue的队头元素\n    que.front();//返回queue的队头元素\n    que.back();//返回queue的队尾元素\n    que.size();//返回stack中元素的个数\n    que.empty();//返回stack是否为空，若为空则返回true否则返回false\n```\n\n⑥`deque`：又称`双端队列`，定义在`<deque>`头文件中，`vector`容器是单向开口的连续内存空间，`deque`则是一种**双向开口的连续线性空间**。所谓的双向开口，意思是可以在头尾两端分别做元素的插入和删除操作，当然，`vector`也可以在头尾两端插入元素，但是在其头部进行插入操作效率奇差，无法被接受。`deque`和`vector`最大的差异一是在于`deque`允许使用常数项时间在头部进行元素的插入和删除操作，二是在于`deque`没有容量的概念，因为它是动态的以分段连续空间组合而成，随时可以增加一段新的空间并链接起来。\n\n-   `deque`的定义方式\n\n```cpp\n    deque<int> deq;//定义一个deque，其中的元素为int类型\n    deque<int> deq[N];//定义一个deque数组，其中有N个deque\n    deque<int> deq(len);//定义一个长度为len的deque\n    deque<int> deq(len, x);//定义一个长度为len的deque，初始化每个元素为x\n    deque<int> deq2(deq1);//用deq1给v2赋值，deq2的类型为deque\n    deque<int> deq2(deq1.begin(), deq1.begin() + 3);//将deq1中第0~2三个元素赋值给deq2\n```\n\n-   `deque`的常用内置函数\n\n```cpp\n    //deque中的常用内置函数\n    deque<int> deq = { 1, 2, 3 };//初始化vector，v:{1, 2, 3}\n    deque<int>::iterator it = deq.begin();//定义vector的迭代器，指向begin()\n\n    deq.push_back(4);//在deque的尾部插入元素4，v:{1, 2, 3, 4}\n    deq.pop_back();//删除deque的尾部元素，v:{1, 2, 3}\n    deq.push_front(4);//在deque的头部插入元素4，v:{4, 1, 2, 3}\n    deq.pop_front();//删除deque的头部元素，v:{1, 2, 3}\n    deq.size();//返回vector中元素的个数\n    deq.empty();//返回vector是否为空，若为空则返回true否则返回false\n    deq.front();//返回vector中的第一个元素\n    deq.back();//返回vector中的最后一个元素\n    deq.begin();//返回vector第一个元素的迭代器\n    deq.end();//返回vector最后一个元素后一个位置的迭代器\n    deq.clear();//清空vector\n    deq.erase(deq.begin());//删除迭代器it所指向的元素\n    deq.insert(deq.begin(), 1);//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器\n\n    //根据下标进行遍历\n    for (int i = 0; i < deq.size(); i++)\n        cout << deq[i] << ' ';\n    //使用迭代器遍历\n    for (deque<int>::iterator it = deq.begin(); it != deq.end(); it++)\n        cout << *it << ' ';\n    //for_each遍历(C++11)\n    for (auto x : deq)\n        cout << x << ' ';\n```\n\n⑦`map/multimap`：又称`映射`，定义在`<map>`头文件中，`map`和`multimap`的底层实现机制都是红黑树。`map`的功能是**能够将任意类型的元素映射到另一个任意类型的元素上**，并且所有的元素都会根据元素的键值自动排序。`map`所有的元素都是`pair`，同时拥有`实值`和`键值`，`pair`的第一元素被视为`键值`，第二元素被视为`实值`，`map`不允许两个元素有相同的键值。`multimap`和`map`的操作类似，唯一区别是`multimap`的键值允许重复。\n\n-   `map/multimap`的定义方式\n\n```cpp\n    map<string, int> mp;//定义一个将string映射成int的map\n    map<string, int> mp[N];//定义一个map数组，其中有N个map\n    multimap<string, int> mulmp;//定义一个将string映射成int的multimap\n    multimap<string, int> mulmp[N];//定义一个multimap数组，其中有N个multimap\n```\n\n-   `map/multimap`的常用内置函数\n\n```cpp\n    //map/multimap中的常用内置函数\n    map<string, int> mp;\n    mp[\"abc\"] = 3;//将\"abc\"映射到3\n    mp[\"ab\"]++;//将\"ab\"所映射的整数++\n    mp.insert(make_pair(\"cd\", 2));//插入元素\n    mp.insert({ \"ef\", 5 });//同上\n    mp.size();//返回map中元素的个数\n    mp.empty();//返回map是否为空，若为空返回true否则返回false\n    mp.clear();//清空map\n    mp.erase(\"ef\");//清除元素{\"ef\", 5}\n    mp[\"abc\"];//返回\"abc\"映射的值\n    mp.begin();//返回map第一个元素的迭代器\n    mp.end();//返回map最后一个元素后一个位置的迭代器\n    mp.lower_bound(\"abc\");//返回第一个键值大于等于\"abc\"的元素的迭代器，{\"abc\", 3}\n    mp.upper_bound(\"abc\");//返回第一个键值大于\"abc\"的元素的迭代器，{\"cd\", 2}\n\n    //使用迭代器遍历\n    for (map<string, int>::iterator it = mp.begin(); it != mp.end(); it++)\n        cout << (*it).first << ' ' << (*it).second << endl;\n    //for_each遍历(C++11)\n    for (auto x : mp)\n        cout << x.first << ' ' << x.second << endl;\n    //扩展推断范围的for_each遍历(C++17)\n    for (auto &[k, v] : mp)\n        cout << k << ' ' << v << endl;\n```\n\n⑧`set/multiset`：又称`集合`，定义在`<set>`头文件中。`set`的特性是所有元素都会根据元素的键值自动被排序，`set`的元素不像`map`那样可以同时拥有`实值`和`键值`，`set`的元素既是`键值`又是`实值`，`set`不允许两个元素有相同的键值，因此总结来说就是`set`中的元素是**有序且不重复的**。`multiset`的特性和用法和`set`完全相同，唯一的区别在于`multiset`允许有重复元素，`set`和`multiset`的底层实现都是红黑树。\n\n-   `set/multiset`的定义方式\n\n```cpp\n    set<int> st;//定义一个set，其中的元素类型为int\n    set<int> st[N];//定义一个set数组，其中有N个set\n    multiset<int> mulst;//定义一个multiset\n    multiset<int> mulst[N];//定义一个multiset数组，其中有N个multiset\n```\n\n-   `set/multiset`的常用内置函数\n\n```cpp\n    //set/multiset中的常用内置函数\n    set<int> st;\n    st.insert(5);//插入元素5\n    st.insert(6);//同上\n    st.insert(7);//同上\n    st.size();//返回set中元素的个数\n    st.empty();//返回set是否为空，若为空返回true否则返回false\n    st.erase(6);//清除元素6\n    st.begin();//返回set第一个元素的迭代器\n    st.end();//返回set最后一个元素后一个位置的迭代器\n    st.clear();//清空set\n    st.lower_bound(5);//返回第一个键值大于等于5的元素的迭代器，返回元素5的迭代器\n    st.upper_bound(5);//返回第一个键值大于5的元素的迭代器，返回元素7的迭代器\n\n    //使用迭代器遍历\n    for (set<int>::iterator it = st.begin(); it != st.end(); it++)\n        cout << (*it) << ' ';\n    //for_each遍历(C++11)\n    for (auto x : st)\n        cout << x << ' ';\n```\n\n⑨`unordered_map/unordered_set`：分别定义在`<unordered_map>`与`<unordered_set>`头文件中，内部采用的是`hash`表结构，拥有快速检索的功能。与`map/set`相比最大的区别在于`unordered_map/unordered_set`中的元素是**无序**的，增删改查的时间复杂度为`O(1)`(`map/set`增删改查的时间复杂度为`O(logn)`)，但是不支持`lower_bound()/upper_bound()`函数。\n\n-   `unordered_map/unordered_set`的定义方式\n\n```cpp\n    unordered_set<int> st;//定义一个unordered_set，其中的元素类型为int\n    unordered_set<int> st[N];//定义一个unordered_set数组，其中有N个unordered_set\n    unordered_map<int, int> mp;//定义一个unordered_map\n    unordered_map<int, int> mp[N];//定义一个unordered_map数组，其中有N个unordered_map\n```\n\n-   `unordered_map/unordered_set`的常用内置函数\n\n```cpp\n    //unordered_map/unordered_set中的常用内置函数\n    unordered_set<int> st;\n    unordered_map<int, int> mp;\n    st.insert(5);//插入元素5\n    st.insert(6);//同上\n    st.insert(7);//同上\n    st.size();//返回unordered_set中元素的个数\n    st.empty();//返回unordered_set是否为空，若为空返回true否则返回false\n    st.erase(6);//清除元素6\n    st.begin();//返回unordered_set第一个元素的迭代器\n    st.end();//返回unordered_set最后一个元素后一个位置的迭代器\n    st.clear();//清空unordered_set\n    mp.insert(make_pair(1, 2));//插入元素{1, 2}\n    mp.insert({ 3, 4 });//同上\n    mp.size();//返回unordered_map中元素的个数\n    mp.empty();//返回unordered_map是否为空，若为空返回true否则返回false\n    mp.erase(3);//清除元素{3, 4}\n    mp.begin();//返回unordered_map第一个元素的迭代器\n    mp.end();//返回unordered_map最后一个元素后一个位置的迭代器\n    mp.clear();//清空unordered_map\n\n    //使用迭代器遍历\n    for (unordered_set<int>::iterator it = st.begin(); it != st.end(); it++)\n        cout << (*it) << ' ';\n    //for_each遍历(C++11)\n    for (auto x : st)\n        cout << x << ' ';\n\n    //使用迭代器遍历\n    for (unordered_map<int, int>::iterator it = mp.begin(); it != mp.end(); it++)\n        cout << (*it).first << ' ' << (*it).second << endl;\n    //for_each遍历(C++11)\n    for (auto x : mp)\n        cout << x.first << ' ' << x.second << endl;\n    //扩展推断范围的for_each遍历(C++17)\n    for (auto &[k, v] : mp)\n        cout << k << ' ' << v << endl;\n```\n\n## 四、STL算法详解\n\nC++标准库定义了一组`泛型算法`，之所以称为`泛型`指的是它们可以操作在多种容器上，**不但可以作用于标准库类型，还可以用在内置数组类型甚至其它类型的序列上。**`泛型算法`定义在`<algorithm>`头文件中，标准库还定义了一组`泛化的算术算法`(`Generalized Numeric Algorithm`)，定义在`<numeric>`头文件中。\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <numeric>\nusing namespace std;\n\nint main()\n{\n    //使用STL容器时将数组地址改为迭代器即可\n\n    int a[5] = { 1, 2, 3, 4, 5 };\n\n    //排序算法\n    sort(a, a + 5);//将区间[0, 5)内元素按字典序从小到大排序\n    sort(a, a + 5, greater<int>());//将区间[0, 5)内元素按字典序从大到小排序\n    reverse(a, a + 5);//将区间[0, 5)内元素翻转\n    nth_element(a, a + 3, a + 5);//将区间[0, 5)中第a + 3个数归位，即将第3大的元素放到正确的位置上，该元素前后的元素不一定有序，但左边元素都小于等于它，右边元素都大于等于它\n\n    //查找与统计算法\n    find(a, a + 5, 3);//在区间[0, 5)内查找等于3的元素，返回迭代器，若不存在则返回end()\n    binary_search(a, a + 5, 2);//二分查找区间[0, 5)内是否存在元素2，若存在返回true否则返回false\n    count(a, a + 5, 3);//返回区间[0, 5)内元素3的个数\n\n    //可变序列算法\n    copy(a, a + 2, a + 3);//将区间[0, 2)的元素复制到以a+3开始的区间，即[3, 5)\n    replace(a, a + 5, 3, 4);//将区间[0, 5)内等于3的元素替换为4\n    fill(a, a + 5, 1);//将1写入区间[0, 5)中(初始化数组函数)\n    unique(a, a + 5);//将相邻元素间的重复元素全部移动至末端，返回去重之后数组最后一个元素之后的地址\n    remove(a, a + 5, 3);//将区间[0, 5)中的元素3移至末端，返回新数组最后一个元素之后的地址\n\n    //排列算法\n    next_permutation(a, a + 5);//产生下一个排列{ 1, 2, 3, 5, 4 }\n    prev_permutation(a, a + 5);//产生上一个排列{ 1, 2, 3, 4, 5 }\n\n    //前缀和算法\n    partial_sum(a, a + 5, a);//计算数组a在区间[0, 5)内的前缀和并将结果保存至数组a中\n\n    return 0;\n}\n```","raw":"---\ntitle: C++ STL整理-算法竞赛向\ncreated: 2021-12-01 12:47:30\ntags: [CN,C++,算法,知识整理]\nsource: https://www.acwing.com/blog/content/10558/\nauthor: Reprinted\ncategories: Algorithm\ntoc: true\nmathjax: false\n---\n\n# 算法竞赛C++ STL详解\n\n---\n\n本蒟蒻写这篇分享的目的一个是为了写一个归纳总结方便自己以后随时能够复习还有就是给那些对STL还不是很了解的萌新介绍一下什么是STL以及如何使用STL更高效(偷懒)地解题。本篇文章将会长期更新~欢迎大家一起监督学习~有错误的地方或者需要补充的欢迎在评论区留言哦~\n\n## 一、什么是STL?\n\nSTL(`Standard Template Library`，标准模板库)，是惠普实验室开发的一系列软件的统称。现主要出现在C++中，STL从广义上分为：容器(`container`)、算法(`algorithm`)和迭代器(`iterator`)。STL几乎所有的代码都采用了**模板类或者模板函数**，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。\n\n## 二、STL六大组件是什么?\n\nSTL提供了六大组件，彼此之间可以组合套用，这六大组件分别是容器、算法、迭代器、仿函数、适配器、空间配置器。其中，在算法竞赛中用到最多的为**容器、算法与迭代器**。\n\n-   容器(`Container`)：STL容器为各种**数据结构**，如`vector`、`stack`、`queue`、`map`、`set`等，用来存放数据，从实现角度来看，STL容器是一种`class template`。\n-   算法(`Algorithm`)：STL的算法多数定义在`<algorithm>`头文件中，其中包括了各种常用的算法，如`sort`、`find`、`copy`、`reverse`等，从实现角度来看，STL算法是一种`function template`。\n-   迭代器(`Iterator`)：STL迭代器扮演了容器与算法之间的胶合剂，共有五种类型，从实现角度来看，迭代器是一种将`opetator*`、`opetator->`、`operator++`等指针相关操作予以重载的`class template`。所有STL容器都附带有自己专属的迭代器，只有容器的设计者才知道如何遍历自己的元素。\n-   仿函数(`Functor`)：行为类似函数，可作为算法的某种策略，从实现角度来看，仿函数是一种重载了`operator()`的`class`或者`class template`。\n-   适配器(`Adaptor`)：一种用来修饰容器或仿函数或迭代器接口的东西。\n-   空间配置器(`Allocator`)：负责空间的配置与管理。从实现角度来看，配置器是一个实现了动态空间配置、空间管理、空间释放的`class template`。\n\n## 三、STL容器详解\n\n相信很多人学习STL就是为了在比赛中能够更好地装B运用各种数据结构和算法，提高解题速度。确实，使用STL中的容器能够不需要自己手写定义各种数据结构，使用STL中的算法能够不需要自己手写实现各种基本算法，因此本部分对于算法巨巨们是最为重要的一部分，那么STL容器究竟有哪些呢?在做题中该如何使用呢?\n\n① `vector`：又称`变长数组`，定义在`<vector>`头文件中，`vector`容器是**动态空间**，随着元素的加入，它的内部机制会自动扩充空间以容纳新的元素。因此`vector`的运用对于内存的合理利用与运用的灵活性有很大的帮助。\n\n-   `vector`的定义方式\n\n```cpp\n    vector<int> v;//定义一个vector，其中的元素为int类型\n    vector<int> v[N];//定义一个vector数组，其中有N个vector\n    vector<int> v(len);//定义一个长度为len的vector\n    vector<int> v(len, x);//定义一个长度为len的vector，初始化每个元素为x\n    vector<int> v2(v1);//用v1给v2赋值，v1的类型为vector\n    vector<int> v2(v1.begin(), v1.begin() + 3);//将v1中第0~2三个元素赋值给v2\n```\n\n-   `vector`的常用内置函数\n\n```cpp\n    //vector中的常用内置函数\n    vector<int> v = { 1, 2, 3 };//初始化vector，v:{1, 2, 3}\n    vector<int>::iterator it = v.begin();//定义vector的迭代器，指向begin()\n\n    v.push_back(4);//在vector的尾部插入元素4，v:{1, 2, 3, 4}\n    v.pop_back();//删除vector的最后一个元素，v:{1, 2, 3}\n    v.size();//返回vector中元素的个数\n    v.empty();//返回vector是否为空，若为空则返回true否则返回false\n    v.front();//返回vector中的第一个元素\n    v.back();//返回vector中的最后一个元素\n    v.begin();//返回vector第一个元素的迭代器\n    v.end();//返回vector最后一个元素后一个位置的迭代器\n    v.clear();//清空vector\n    v.erase(v.begin());//删除迭代器it所指向的元素\n    v.insert(v.begin(), 1);//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器\n\n    //根据下标进行遍历\n    for (int i = 0; i < v.size(); i++)\n        cout << v[i] << ' ';\n    //使用迭代器遍历\n    for (vector<int>::iterator it = v.begin(); it != v.end(); it++)\n        cout << *it << ' ';\n    //for_each遍历(C++11)\n    for (auto x : v)\n        cout << x << ' ';\n```\n\n②`stack`：又称`栈`，是一种**后进先出**(`Last In First Out，LIFO`)的数据结构，定义在`<stack>`头文件中，`stack`容器允许新增元素、移除元素、取得栈顶元素，但是除了最顶端以外，没有任何方法可以存取`stack`的其它元素，换言之，`stack`**不允许有遍历行为**。\n\n-   `stack`的定义方式\n\n```cpp\n    stack<int> stk;//定义一个stack，其中元素的类型为int\n    stack<int> stk[N];//定义一个stack数组，其中有N个stack\n```\n\n-   `stack`的常用内置函数\n\n```cpp\n    //stack中的常用内置函数\n    stack<int> stk;\n    stk.push(x);//在stack中插入元素x\n    stk.pop();//弹出stack的栈顶元素\n    stk.top();//返回stack的栈顶元素\n    stk.size();//返回stack中元素的个数\n    stk.empty();//返回stack是否为空，若为空则返回true否则返回false\n```\n\n③`string`：又称字符串，定义在`<string>`头文件中。C风格的字符串(以空字符结尾的字符数组)太过复杂难于掌握，因此C++标准库定义了一种`string`类。`string`玩得好，天梯和蓝桥拿个国奖真的有手就行。因此熟练地运用`string`还是很重要滴~\n\n-   `string`的定义方式\n\n```cpp\n    string str;//定义一个空的字符串\n    string str[N];//定义一个string数组，其中有N个string\n    string str(5, 'a');//使用5个字符'a'初始化\n    string str(\"abc\");//使用字符串初始化\n```\n\n-   `string`的常用内置函数\n\n```cpp\n //string中的常用内置函数\n    string str(\"abcabc\");\n    str.push_back('d');//在string尾部插入字符，\"abcabcd\"\n    str.pop_back();//删除string尾部的字符，\"abcabc\"\n    str.length();//返回string中字符的个数\n    str.size();//作用与length()相同\n    str.empty();//返回string是否为空，若为空返回true否则返回false\n    str.substr(1);//返回string中从下标为1开始至末尾的子串，\"bc\"\n    str.substr(0, 2);//返回string中从下标为0开始长度为2的子串，\"ab\"\n    str.insert(1, 2, 'x');//在下标为1的字符前插入2个字符'x'，\"axxbcabc\"\n    str.insert(1, \"yy\");//在下标为1的字符前插入字符串\"yy\"，\"ayyxxbcabc\"\n    str.erase(1, 4);//删除从位置1开始的4个字符，\"abcabc\"\n    str.find('b');//返回字符'b'在string中第一次出现的位置，返回1\n    str.find('b', 2);//返回从位置2开始字符'b'在string中第一次出现的位置，返回4\n    str.find(\"bc\");//同上，返回字符串第一次出现的位置，返回1\n    str.find(\"bc\", 2);//返回4\n    str.rfind('b');//反向查找，原理同上，返回4\n    str.rfind('b', 3);//返回1\n    str.rfind(\"bc\");//返回4\n    str.rfind(\"bc\", 3);//返回1\n    str[0];//用下标访问string中的字符\n    cout << (str == str) << endl;//string可比较大小，按字典序\n```\n\n-   `string`的`erase()`与`remove()`函数的用法\n\n```cpp\n    //string中erase()与remove()的用法\n    string str1, str2, str3, str4, str5;\n    str1 = str2 = str3 = str4 = str5 = \"I love AcWing! It's very funny!\";\n    str1.erase(15);//删除[15,end())的所有元素，\"I love AcWing!\"\n    str2.erase(6, 11);//从第6个元素(包括)开始往后删除11个元素，\"I love's very funny!\"\n    str3.erase(str3.begin() + 2);//删除迭代器所指的元素，\"I ove AcWing! It's very funny!\"\n    str4.erase(str4.begin() + 7, str4.end() - 11);//删除[str4.begin()+7,str4.end()-11)的所有元素，\"I love very funny!\"\n    str5.erase(remove(str5.begin(), str5.end(), 'n'), str5.end());//删除[str5.begin(),str5.end())中所有字符'n'，\"I love AcWig! It's very fuy!\"\n```\n\n④`queue`：又称`队列`，是一种**先进先出**(`First In First Out，FIFO`)的数据结构，定义在`<queue>`头文件中，`queue`容器允许从一端(称为`队尾`)新增元素(`入队`)，从另一端(称为`队头`)移除元素(`出队`)。  \n⑤`priority_queue`：又称`优先队列`，同样定义在`<queue>`头文件中，与`queue`不同的地方在于我们可以自定义其中数据的优先级，优先级高的排在队列前面，优先出队。`priority_queue`具有`queue`的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它的本质是用`堆`实现的，因此可分为`小根堆`与`大根堆`，`小根堆`中较小的元素排在前面，`大根堆`中较大的元素排在前面。**注意：创建`priority_queue`时默认是`大根堆`！**\n\n-   `queue`的定义方式\n\n```cpp\n    queue<int> que;//定义一个queue，其中元素的类型为int\n    queue<int> que[N];//定义一个queue数组，其中有N个queue\n    priority_queue<int> bigHeap;//定义一个大根堆\n    priority_queue<int, vector<int>, greater<int> > smallHeap;//定义一个小根堆\n```\n\n-   `queue`的常用内置函数\n\n```cpp\n    //queue中的常用内置函数\n    queue<int> que;\n    que.push(x);//在queue的队尾插入元素x\n    que.pop();//出队queue的队头元素\n    que.front();//返回queue的队头元素\n    que.back();//返回queue的队尾元素\n    que.size();//返回stack中元素的个数\n    que.empty();//返回stack是否为空，若为空则返回true否则返回false\n```\n\n⑥`deque`：又称`双端队列`，定义在`<deque>`头文件中，`vector`容器是单向开口的连续内存空间，`deque`则是一种**双向开口的连续线性空间**。所谓的双向开口，意思是可以在头尾两端分别做元素的插入和删除操作，当然，`vector`也可以在头尾两端插入元素，但是在其头部进行插入操作效率奇差，无法被接受。`deque`和`vector`最大的差异一是在于`deque`允许使用常数项时间在头部进行元素的插入和删除操作，二是在于`deque`没有容量的概念，因为它是动态的以分段连续空间组合而成，随时可以增加一段新的空间并链接起来。\n\n-   `deque`的定义方式\n\n```cpp\n    deque<int> deq;//定义一个deque，其中的元素为int类型\n    deque<int> deq[N];//定义一个deque数组，其中有N个deque\n    deque<int> deq(len);//定义一个长度为len的deque\n    deque<int> deq(len, x);//定义一个长度为len的deque，初始化每个元素为x\n    deque<int> deq2(deq1);//用deq1给v2赋值，deq2的类型为deque\n    deque<int> deq2(deq1.begin(), deq1.begin() + 3);//将deq1中第0~2三个元素赋值给deq2\n```\n\n-   `deque`的常用内置函数\n\n```cpp\n    //deque中的常用内置函数\n    deque<int> deq = { 1, 2, 3 };//初始化vector，v:{1, 2, 3}\n    deque<int>::iterator it = deq.begin();//定义vector的迭代器，指向begin()\n\n    deq.push_back(4);//在deque的尾部插入元素4，v:{1, 2, 3, 4}\n    deq.pop_back();//删除deque的尾部元素，v:{1, 2, 3}\n    deq.push_front(4);//在deque的头部插入元素4，v:{4, 1, 2, 3}\n    deq.pop_front();//删除deque的头部元素，v:{1, 2, 3}\n    deq.size();//返回vector中元素的个数\n    deq.empty();//返回vector是否为空，若为空则返回true否则返回false\n    deq.front();//返回vector中的第一个元素\n    deq.back();//返回vector中的最后一个元素\n    deq.begin();//返回vector第一个元素的迭代器\n    deq.end();//返回vector最后一个元素后一个位置的迭代器\n    deq.clear();//清空vector\n    deq.erase(deq.begin());//删除迭代器it所指向的元素\n    deq.insert(deq.begin(), 1);//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器\n\n    //根据下标进行遍历\n    for (int i = 0; i < deq.size(); i++)\n        cout << deq[i] << ' ';\n    //使用迭代器遍历\n    for (deque<int>::iterator it = deq.begin(); it != deq.end(); it++)\n        cout << *it << ' ';\n    //for_each遍历(C++11)\n    for (auto x : deq)\n        cout << x << ' ';\n```\n\n⑦`map/multimap`：又称`映射`，定义在`<map>`头文件中，`map`和`multimap`的底层实现机制都是红黑树。`map`的功能是**能够将任意类型的元素映射到另一个任意类型的元素上**，并且所有的元素都会根据元素的键值自动排序。`map`所有的元素都是`pair`，同时拥有`实值`和`键值`，`pair`的第一元素被视为`键值`，第二元素被视为`实值`，`map`不允许两个元素有相同的键值。`multimap`和`map`的操作类似，唯一区别是`multimap`的键值允许重复。\n\n-   `map/multimap`的定义方式\n\n```cpp\n    map<string, int> mp;//定义一个将string映射成int的map\n    map<string, int> mp[N];//定义一个map数组，其中有N个map\n    multimap<string, int> mulmp;//定义一个将string映射成int的multimap\n    multimap<string, int> mulmp[N];//定义一个multimap数组，其中有N个multimap\n```\n\n-   `map/multimap`的常用内置函数\n\n```cpp\n    //map/multimap中的常用内置函数\n    map<string, int> mp;\n    mp[\"abc\"] = 3;//将\"abc\"映射到3\n    mp[\"ab\"]++;//将\"ab\"所映射的整数++\n    mp.insert(make_pair(\"cd\", 2));//插入元素\n    mp.insert({ \"ef\", 5 });//同上\n    mp.size();//返回map中元素的个数\n    mp.empty();//返回map是否为空，若为空返回true否则返回false\n    mp.clear();//清空map\n    mp.erase(\"ef\");//清除元素{\"ef\", 5}\n    mp[\"abc\"];//返回\"abc\"映射的值\n    mp.begin();//返回map第一个元素的迭代器\n    mp.end();//返回map最后一个元素后一个位置的迭代器\n    mp.lower_bound(\"abc\");//返回第一个键值大于等于\"abc\"的元素的迭代器，{\"abc\", 3}\n    mp.upper_bound(\"abc\");//返回第一个键值大于\"abc\"的元素的迭代器，{\"cd\", 2}\n\n    //使用迭代器遍历\n    for (map<string, int>::iterator it = mp.begin(); it != mp.end(); it++)\n        cout << (*it).first << ' ' << (*it).second << endl;\n    //for_each遍历(C++11)\n    for (auto x : mp)\n        cout << x.first << ' ' << x.second << endl;\n    //扩展推断范围的for_each遍历(C++17)\n    for (auto &[k, v] : mp)\n        cout << k << ' ' << v << endl;\n```\n\n⑧`set/multiset`：又称`集合`，定义在`<set>`头文件中。`set`的特性是所有元素都会根据元素的键值自动被排序，`set`的元素不像`map`那样可以同时拥有`实值`和`键值`，`set`的元素既是`键值`又是`实值`，`set`不允许两个元素有相同的键值，因此总结来说就是`set`中的元素是**有序且不重复的**。`multiset`的特性和用法和`set`完全相同，唯一的区别在于`multiset`允许有重复元素，`set`和`multiset`的底层实现都是红黑树。\n\n-   `set/multiset`的定义方式\n\n```cpp\n    set<int> st;//定义一个set，其中的元素类型为int\n    set<int> st[N];//定义一个set数组，其中有N个set\n    multiset<int> mulst;//定义一个multiset\n    multiset<int> mulst[N];//定义一个multiset数组，其中有N个multiset\n```\n\n-   `set/multiset`的常用内置函数\n\n```cpp\n    //set/multiset中的常用内置函数\n    set<int> st;\n    st.insert(5);//插入元素5\n    st.insert(6);//同上\n    st.insert(7);//同上\n    st.size();//返回set中元素的个数\n    st.empty();//返回set是否为空，若为空返回true否则返回false\n    st.erase(6);//清除元素6\n    st.begin();//返回set第一个元素的迭代器\n    st.end();//返回set最后一个元素后一个位置的迭代器\n    st.clear();//清空set\n    st.lower_bound(5);//返回第一个键值大于等于5的元素的迭代器，返回元素5的迭代器\n    st.upper_bound(5);//返回第一个键值大于5的元素的迭代器，返回元素7的迭代器\n\n    //使用迭代器遍历\n    for (set<int>::iterator it = st.begin(); it != st.end(); it++)\n        cout << (*it) << ' ';\n    //for_each遍历(C++11)\n    for (auto x : st)\n        cout << x << ' ';\n```\n\n⑨`unordered_map/unordered_set`：分别定义在`<unordered_map>`与`<unordered_set>`头文件中，内部采用的是`hash`表结构，拥有快速检索的功能。与`map/set`相比最大的区别在于`unordered_map/unordered_set`中的元素是**无序**的，增删改查的时间复杂度为`O(1)`(`map/set`增删改查的时间复杂度为`O(logn)`)，但是不支持`lower_bound()/upper_bound()`函数。\n\n-   `unordered_map/unordered_set`的定义方式\n\n```cpp\n    unordered_set<int> st;//定义一个unordered_set，其中的元素类型为int\n    unordered_set<int> st[N];//定义一个unordered_set数组，其中有N个unordered_set\n    unordered_map<int, int> mp;//定义一个unordered_map\n    unordered_map<int, int> mp[N];//定义一个unordered_map数组，其中有N个unordered_map\n```\n\n-   `unordered_map/unordered_set`的常用内置函数\n\n```cpp\n    //unordered_map/unordered_set中的常用内置函数\n    unordered_set<int> st;\n    unordered_map<int, int> mp;\n    st.insert(5);//插入元素5\n    st.insert(6);//同上\n    st.insert(7);//同上\n    st.size();//返回unordered_set中元素的个数\n    st.empty();//返回unordered_set是否为空，若为空返回true否则返回false\n    st.erase(6);//清除元素6\n    st.begin();//返回unordered_set第一个元素的迭代器\n    st.end();//返回unordered_set最后一个元素后一个位置的迭代器\n    st.clear();//清空unordered_set\n    mp.insert(make_pair(1, 2));//插入元素{1, 2}\n    mp.insert({ 3, 4 });//同上\n    mp.size();//返回unordered_map中元素的个数\n    mp.empty();//返回unordered_map是否为空，若为空返回true否则返回false\n    mp.erase(3);//清除元素{3, 4}\n    mp.begin();//返回unordered_map第一个元素的迭代器\n    mp.end();//返回unordered_map最后一个元素后一个位置的迭代器\n    mp.clear();//清空unordered_map\n\n    //使用迭代器遍历\n    for (unordered_set<int>::iterator it = st.begin(); it != st.end(); it++)\n        cout << (*it) << ' ';\n    //for_each遍历(C++11)\n    for (auto x : st)\n        cout << x << ' ';\n\n    //使用迭代器遍历\n    for (unordered_map<int, int>::iterator it = mp.begin(); it != mp.end(); it++)\n        cout << (*it).first << ' ' << (*it).second << endl;\n    //for_each遍历(C++11)\n    for (auto x : mp)\n        cout << x.first << ' ' << x.second << endl;\n    //扩展推断范围的for_each遍历(C++17)\n    for (auto &[k, v] : mp)\n        cout << k << ' ' << v << endl;\n```\n\n## 四、STL算法详解\n\nC++标准库定义了一组`泛型算法`，之所以称为`泛型`指的是它们可以操作在多种容器上，**不但可以作用于标准库类型，还可以用在内置数组类型甚至其它类型的序列上。**`泛型算法`定义在`<algorithm>`头文件中，标准库还定义了一组`泛化的算术算法`(`Generalized Numeric Algorithm`)，定义在`<numeric>`头文件中。\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <numeric>\nusing namespace std;\n\nint main()\n{\n    //使用STL容器时将数组地址改为迭代器即可\n\n    int a[5] = { 1, 2, 3, 4, 5 };\n\n    //排序算法\n    sort(a, a + 5);//将区间[0, 5)内元素按字典序从小到大排序\n    sort(a, a + 5, greater<int>());//将区间[0, 5)内元素按字典序从大到小排序\n    reverse(a, a + 5);//将区间[0, 5)内元素翻转\n    nth_element(a, a + 3, a + 5);//将区间[0, 5)中第a + 3个数归位，即将第3大的元素放到正确的位置上，该元素前后的元素不一定有序，但左边元素都小于等于它，右边元素都大于等于它\n\n    //查找与统计算法\n    find(a, a + 5, 3);//在区间[0, 5)内查找等于3的元素，返回迭代器，若不存在则返回end()\n    binary_search(a, a + 5, 2);//二分查找区间[0, 5)内是否存在元素2，若存在返回true否则返回false\n    count(a, a + 5, 3);//返回区间[0, 5)内元素3的个数\n\n    //可变序列算法\n    copy(a, a + 2, a + 3);//将区间[0, 2)的元素复制到以a+3开始的区间，即[3, 5)\n    replace(a, a + 5, 3, 4);//将区间[0, 5)内等于3的元素替换为4\n    fill(a, a + 5, 1);//将1写入区间[0, 5)中(初始化数组函数)\n    unique(a, a + 5);//将相邻元素间的重复元素全部移动至末端，返回去重之后数组最后一个元素之后的地址\n    remove(a, a + 5, 3);//将区间[0, 5)中的元素3移至末端，返回新数组最后一个元素之后的地址\n\n    //排列算法\n    next_permutation(a, a + 5);//产生下一个排列{ 1, 2, 3, 5, 4 }\n    prev_permutation(a, a + 5);//产生上一个排列{ 1, 2, 3, 4, 5 }\n\n    //前缀和算法\n    partial_sum(a, a + 5, a);//计算数组a在区间[0, 5)内的前缀和并将结果保存至数组a中\n\n    return 0;\n}\n```","slug":"Cpp-STL","published":1,"date":"2022-11-07T06:52:48.259Z","updated":"2022-03-15T11:03:26.000Z","_id":"cl0s106bt00015oo40eb28wmm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"算法竞赛C-STL详解\"><a href=\"#算法竞赛C-STL详解\" class=\"headerlink\" title=\"算法竞赛C++ STL详解\"></a>算法竞赛C++ STL详解</h1><hr>\n<p>本蒟蒻写这篇分享的目的一个是为了写一个归纳总结方便自己以后随时能够复习还有就是给那些对STL还不是很了解的萌新介绍一下什么是STL以及如何使用STL更高效(偷懒)地解题。本篇文章将会长期更新~欢迎大家一起监督学习~有错误的地方或者需要补充的欢迎在评论区留言哦~</p>\n<h2 id=\"一、什么是STL\"><a href=\"#一、什么是STL\" class=\"headerlink\" title=\"一、什么是STL?\"></a>一、什么是STL?</h2><p>STL(<code>Standard Template Library</code>，标准模板库)，是惠普实验室开发的一系列软件的统称。现主要出现在C++中，STL从广义上分为：容器(<code>container</code>)、算法(<code>algorithm</code>)和迭代器(<code>iterator</code>)。STL几乎所有的代码都采用了<strong>模板类或者模板函数</strong>，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。</p>\n<h2 id=\"二、STL六大组件是什么\"><a href=\"#二、STL六大组件是什么\" class=\"headerlink\" title=\"二、STL六大组件是什么?\"></a>二、STL六大组件是什么?</h2><p>STL提供了六大组件，彼此之间可以组合套用，这六大组件分别是容器、算法、迭代器、仿函数、适配器、空间配置器。其中，在算法竞赛中用到最多的为<strong>容器、算法与迭代器</strong>。</p>\n<ul>\n<li>容器(<code>Container</code>)：STL容器为各种<strong>数据结构</strong>，如<code>vector</code>、<code>stack</code>、<code>queue</code>、<code>map</code>、<code>set</code>等，用来存放数据，从实现角度来看，STL容器是一种<code>class template</code>。</li>\n<li>算法(<code>Algorithm</code>)：STL的算法多数定义在<code>&lt;algorithm&gt;</code>头文件中，其中包括了各种常用的算法，如<code>sort</code>、<code>find</code>、<code>copy</code>、<code>reverse</code>等，从实现角度来看，STL算法是一种<code>function template</code>。</li>\n<li>迭代器(<code>Iterator</code>)：STL迭代器扮演了容器与算法之间的胶合剂，共有五种类型，从实现角度来看，迭代器是一种将<code>opetator*</code>、<code>opetator-&gt;</code>、<code>operator++</code>等指针相关操作予以重载的<code>class template</code>。所有STL容器都附带有自己专属的迭代器，只有容器的设计者才知道如何遍历自己的元素。</li>\n<li>仿函数(<code>Functor</code>)：行为类似函数，可作为算法的某种策略，从实现角度来看，仿函数是一种重载了<code>operator()</code>的<code>class</code>或者<code>class template</code>。</li>\n<li>适配器(<code>Adaptor</code>)：一种用来修饰容器或仿函数或迭代器接口的东西。</li>\n<li>空间配置器(<code>Allocator</code>)：负责空间的配置与管理。从实现角度来看，配置器是一个实现了动态空间配置、空间管理、空间释放的<code>class template</code>。</li>\n</ul>\n<h2 id=\"三、STL容器详解\"><a href=\"#三、STL容器详解\" class=\"headerlink\" title=\"三、STL容器详解\"></a>三、STL容器详解</h2><p>相信很多人学习STL就是为了在比赛中能够更好地装B运用各种数据结构和算法，提高解题速度。确实，使用STL中的容器能够不需要自己手写定义各种数据结构，使用STL中的算法能够不需要自己手写实现各种基本算法，因此本部分对于算法巨巨们是最为重要的一部分，那么STL容器究竟有哪些呢?在做题中该如何使用呢?</p>\n<p>① <code>vector</code>：又称<code>变长数组</code>，定义在<code>&lt;vector&gt;</code>头文件中，<code>vector</code>容器是<strong>动态空间</strong>，随着元素的加入，它的内部机制会自动扩充空间以容纳新的元素。因此<code>vector</code>的运用对于内存的合理利用与运用的灵活性有很大的帮助。</p>\n<ul>\n<li><code>vector</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v;<span class=\"comment\">//定义一个vector，其中的元素为int类型</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v[N];<span class=\"comment\">//定义一个vector数组，其中有N个vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(len)</span></span>;<span class=\"comment\">//定义一个长度为len的vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(len, x)</span></span>;<span class=\"comment\">//定义一个长度为len的vector，初始化每个元素为x</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(v1)</span></span>;<span class=\"comment\">//用v1给v2赋值，v1的类型为vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(v1.begin(), v1.begin() + <span class=\"number\">3</span>)</span></span>;<span class=\"comment\">//将v1中第0~2三个元素赋值给v2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>vector</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//vector中的常用内置函数</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;<span class=\"comment\">//初始化vector，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>();<span class=\"comment\">//定义vector的迭代器，指向begin()</span></span><br><span class=\"line\"></span><br><span class=\"line\">v.<span class=\"built_in\">push_back</span>(<span class=\"number\">4</span>);<span class=\"comment\">//在vector的尾部插入元素4，v:&#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\">v.<span class=\"built_in\">pop_back</span>();<span class=\"comment\">//删除vector的最后一个元素，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">v.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回vector中元素的个数</span></span><br><span class=\"line\">v.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回vector是否为空，若为空则返回true否则返回false</span></span><br><span class=\"line\">v.<span class=\"built_in\">front</span>();<span class=\"comment\">//返回vector中的第一个元素</span></span><br><span class=\"line\">v.<span class=\"built_in\">back</span>();<span class=\"comment\">//返回vector中的最后一个元素</span></span><br><span class=\"line\">v.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回vector第一个元素的迭代器</span></span><br><span class=\"line\">v.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回vector最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">v.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空vector</span></span><br><span class=\"line\">v.<span class=\"built_in\">erase</span>(v.<span class=\"built_in\">begin</span>());<span class=\"comment\">//删除迭代器it所指向的元素</span></span><br><span class=\"line\">v.<span class=\"built_in\">insert</span>(v.<span class=\"built_in\">begin</span>(), <span class=\"number\">1</span>);<span class=\"comment\">//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据下标进行遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    cout &lt;&lt; v[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : v)</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>②<code>stack</code>：又称<code>栈</code>，是一种<strong>后进先出</strong>(<code>Last In First Out，LIFO</code>)的数据结构，定义在<code>&lt;stack&gt;</code>头文件中，<code>stack</code>容器允许新增元素、移除元素、取得栈顶元素，但是除了最顶端以外，没有任何方法可以存取<code>stack</code>的其它元素，换言之，<code>stack</code><strong>不允许有遍历行为</strong>。</p>\n<ul>\n<li><code>stack</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; stk;<span class=\"comment\">//定义一个stack，其中元素的类型为int</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; stk[N];<span class=\"comment\">//定义一个stack数组，其中有N个stack</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>stack</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//stack中的常用内置函数</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; stk;</span><br><span class=\"line\">stk.<span class=\"built_in\">push</span>(x);<span class=\"comment\">//在stack中插入元素x</span></span><br><span class=\"line\">stk.<span class=\"built_in\">pop</span>();<span class=\"comment\">//弹出stack的栈顶元素</span></span><br><span class=\"line\">stk.<span class=\"built_in\">top</span>();<span class=\"comment\">//返回stack的栈顶元素</span></span><br><span class=\"line\">stk.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回stack中元素的个数</span></span><br><span class=\"line\">stk.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回stack是否为空，若为空则返回true否则返回false</span></span><br></pre></td></tr></table></figure>\n<p>③<code>string</code>：又称字符串，定义在<code>&lt;string&gt;</code>头文件中。C风格的字符串(以空字符结尾的字符数组)太过复杂难于掌握，因此C++标准库定义了一种<code>string</code>类。<code>string</code>玩得好，天梯和蓝桥拿个国奖真的有手就行。因此熟练地运用<code>string</code>还是很重要滴~</p>\n<ul>\n<li><code>string</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string str;<span class=\"comment\">//定义一个空的字符串</span></span><br><span class=\"line\">string str[N];<span class=\"comment\">//定义一个string数组，其中有N个string</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"string\">&#x27;a&#x27;</span>)</span></span>;<span class=\"comment\">//使用5个字符&#x27;a&#x27;初始化</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;abc&quot;</span>)</span></span>;<span class=\"comment\">//使用字符串初始化</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>string</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//string中的常用内置函数</span></span><br><span class=\"line\">   <span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;abcabc&quot;</span>)</span></span>;</span><br><span class=\"line\">   str.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;d&#x27;</span>);<span class=\"comment\">//在string尾部插入字符，&quot;abcabcd&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">pop_back</span>();<span class=\"comment\">//删除string尾部的字符，&quot;abcabc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">length</span>();<span class=\"comment\">//返回string中字符的个数</span></span><br><span class=\"line\">   str.<span class=\"built_in\">size</span>();<span class=\"comment\">//作用与length()相同</span></span><br><span class=\"line\">   str.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回string是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">   str.<span class=\"built_in\">substr</span>(<span class=\"number\">1</span>);<span class=\"comment\">//返回string中从下标为1开始至末尾的子串，&quot;bc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>);<span class=\"comment\">//返回string中从下标为0开始长度为2的子串，&quot;ab&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;x&#x27;</span>);<span class=\"comment\">//在下标为1的字符前插入2个字符&#x27;x&#x27;，&quot;axxbcabc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;yy&quot;</span>);<span class=\"comment\">//在下标为1的字符前插入字符串&quot;yy&quot;，&quot;ayyxxbcabc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">erase</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>);<span class=\"comment\">//删除从位置1开始的4个字符，&quot;abcabc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;b&#x27;</span>);<span class=\"comment\">//返回字符&#x27;b&#x27;在string中第一次出现的位置，返回1</span></span><br><span class=\"line\">   str.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>);<span class=\"comment\">//返回从位置2开始字符&#x27;b&#x27;在string中第一次出现的位置，返回4</span></span><br><span class=\"line\">   str.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;bc&quot;</span>);<span class=\"comment\">//同上，返回字符串第一次出现的位置，返回1</span></span><br><span class=\"line\">   str.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;bc&quot;</span>, <span class=\"number\">2</span>);<span class=\"comment\">//返回4</span></span><br><span class=\"line\">   str.<span class=\"built_in\">rfind</span>(<span class=\"string\">&#x27;b&#x27;</span>);<span class=\"comment\">//反向查找，原理同上，返回4</span></span><br><span class=\"line\">   str.<span class=\"built_in\">rfind</span>(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">3</span>);<span class=\"comment\">//返回1</span></span><br><span class=\"line\">   str.<span class=\"built_in\">rfind</span>(<span class=\"string\">&quot;bc&quot;</span>);<span class=\"comment\">//返回4</span></span><br><span class=\"line\">   str.<span class=\"built_in\">rfind</span>(<span class=\"string\">&quot;bc&quot;</span>, <span class=\"number\">3</span>);<span class=\"comment\">//返回1</span></span><br><span class=\"line\">   str[<span class=\"number\">0</span>];<span class=\"comment\">//用下标访问string中的字符</span></span><br><span class=\"line\">   cout &lt;&lt; (str == str) &lt;&lt; endl;<span class=\"comment\">//string可比较大小，按字典序</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>string</code>的<code>erase()</code>与<code>remove()</code>函数的用法</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//string中erase()与remove()的用法</span></span><br><span class=\"line\">string str1, str2, str3, str4, str5;</span><br><span class=\"line\">str1 = str2 = str3 = str4 = str5 = <span class=\"string\">&quot;I love AcWing! It&#x27;s very funny!&quot;</span>;</span><br><span class=\"line\">str1.<span class=\"built_in\">erase</span>(<span class=\"number\">15</span>);<span class=\"comment\">//删除[15,end())的所有元素，&quot;I love AcWing!&quot;</span></span><br><span class=\"line\">str2.<span class=\"built_in\">erase</span>(<span class=\"number\">6</span>, <span class=\"number\">11</span>);<span class=\"comment\">//从第6个元素(包括)开始往后删除11个元素，&quot;I love&#x27;s very funny!&quot;</span></span><br><span class=\"line\">str3.<span class=\"built_in\">erase</span>(str3.<span class=\"built_in\">begin</span>() + <span class=\"number\">2</span>);<span class=\"comment\">//删除迭代器所指的元素，&quot;I ove AcWing! It&#x27;s very funny!&quot;</span></span><br><span class=\"line\">str4.<span class=\"built_in\">erase</span>(str4.<span class=\"built_in\">begin</span>() + <span class=\"number\">7</span>, str4.<span class=\"built_in\">end</span>() - <span class=\"number\">11</span>);<span class=\"comment\">//删除[str4.begin()+7,str4.end()-11)的所有元素，&quot;I love very funny!&quot;</span></span><br><span class=\"line\">str5.<span class=\"built_in\">erase</span>(<span class=\"built_in\">remove</span>(str5.<span class=\"built_in\">begin</span>(), str5.<span class=\"built_in\">end</span>(), <span class=\"string\">&#x27;n&#x27;</span>), str5.<span class=\"built_in\">end</span>());<span class=\"comment\">//删除[str5.begin(),str5.end())中所有字符&#x27;n&#x27;，&quot;I love AcWig! It&#x27;s very fuy!&quot;</span></span><br></pre></td></tr></table></figure>\n<p>④<code>queue</code>：又称<code>队列</code>，是一种<strong>先进先出</strong>(<code>First In First Out，FIFO</code>)的数据结构，定义在<code>&lt;queue&gt;</code>头文件中，<code>queue</code>容器允许从一端(称为<code>队尾</code>)新增元素(<code>入队</code>)，从另一端(称为<code>队头</code>)移除元素(<code>出队</code>)。<br>⑤<code>priority_queue</code>：又称<code>优先队列</code>，同样定义在<code>&lt;queue&gt;</code>头文件中，与<code>queue</code>不同的地方在于我们可以自定义其中数据的优先级，优先级高的排在队列前面，优先出队。<code>priority_queue</code>具有<code>queue</code>的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它的本质是用<code>堆</code>实现的，因此可分为<code>小根堆</code>与<code>大根堆</code>，<code>小根堆</code>中较小的元素排在前面，<code>大根堆</code>中较大的元素排在前面。<strong>注意：创建<code>priority_queue</code>时默认是<code>大根堆</code>！</strong></p>\n<ul>\n<li><code>queue</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; que;<span class=\"comment\">//定义一个queue，其中元素的类型为int</span></span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; que[N];<span class=\"comment\">//定义一个queue数组，其中有N个queue</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; bigHeap;<span class=\"comment\">//定义一个大根堆</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt; &gt; smallHeap;<span class=\"comment\">//定义一个小根堆</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>queue</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//queue中的常用内置函数</span></span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; que;</span><br><span class=\"line\">que.<span class=\"built_in\">push</span>(x);<span class=\"comment\">//在queue的队尾插入元素x</span></span><br><span class=\"line\">que.<span class=\"built_in\">pop</span>();<span class=\"comment\">//出队queue的队头元素</span></span><br><span class=\"line\">que.<span class=\"built_in\">front</span>();<span class=\"comment\">//返回queue的队头元素</span></span><br><span class=\"line\">que.<span class=\"built_in\">back</span>();<span class=\"comment\">//返回queue的队尾元素</span></span><br><span class=\"line\">que.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回stack中元素的个数</span></span><br><span class=\"line\">que.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回stack是否为空，若为空则返回true否则返回false</span></span><br></pre></td></tr></table></figure>\n<p>⑥<code>deque</code>：又称<code>双端队列</code>，定义在<code>&lt;deque&gt;</code>头文件中，<code>vector</code>容器是单向开口的连续内存空间，<code>deque</code>则是一种<strong>双向开口的连续线性空间</strong>。所谓的双向开口，意思是可以在头尾两端分别做元素的插入和删除操作，当然，<code>vector</code>也可以在头尾两端插入元素，但是在其头部进行插入操作效率奇差，无法被接受。<code>deque</code>和<code>vector</code>最大的差异一是在于<code>deque</code>允许使用常数项时间在头部进行元素的插入和删除操作，二是在于<code>deque</code>没有容量的概念，因为它是动态的以分段连续空间组合而成，随时可以增加一段新的空间并链接起来。</p>\n<ul>\n<li><code>deque</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt; deq;<span class=\"comment\">//定义一个deque，其中的元素为int类型</span></span><br><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt; deq[N];<span class=\"comment\">//定义一个deque数组，其中有N个deque</span></span><br><span class=\"line\"><span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">deq</span><span class=\"params\">(len)</span></span>;<span class=\"comment\">//定义一个长度为len的deque</span></span><br><span class=\"line\"><span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">deq</span><span class=\"params\">(len, x)</span></span>;<span class=\"comment\">//定义一个长度为len的deque，初始化每个元素为x</span></span><br><span class=\"line\"><span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">deq2</span><span class=\"params\">(deq1)</span></span>;<span class=\"comment\">//用deq1给v2赋值，deq2的类型为deque</span></span><br><span class=\"line\"><span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">deq2</span><span class=\"params\">(deq1.begin(), deq1.begin() + <span class=\"number\">3</span>)</span></span>;<span class=\"comment\">//将deq1中第0~2三个元素赋值给deq2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>deque</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//deque中的常用内置函数</span></span><br><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt; deq = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;<span class=\"comment\">//初始化vector，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt;::iterator it = deq.<span class=\"built_in\">begin</span>();<span class=\"comment\">//定义vector的迭代器，指向begin()</span></span><br><span class=\"line\"></span><br><span class=\"line\">deq.<span class=\"built_in\">push_back</span>(<span class=\"number\">4</span>);<span class=\"comment\">//在deque的尾部插入元素4，v:&#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\">deq.<span class=\"built_in\">pop_back</span>();<span class=\"comment\">//删除deque的尾部元素，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">deq.<span class=\"built_in\">push_front</span>(<span class=\"number\">4</span>);<span class=\"comment\">//在deque的头部插入元素4，v:&#123;4, 1, 2, 3&#125;</span></span><br><span class=\"line\">deq.<span class=\"built_in\">pop_front</span>();<span class=\"comment\">//删除deque的头部元素，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">deq.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回vector中元素的个数</span></span><br><span class=\"line\">deq.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回vector是否为空，若为空则返回true否则返回false</span></span><br><span class=\"line\">deq.<span class=\"built_in\">front</span>();<span class=\"comment\">//返回vector中的第一个元素</span></span><br><span class=\"line\">deq.<span class=\"built_in\">back</span>();<span class=\"comment\">//返回vector中的最后一个元素</span></span><br><span class=\"line\">deq.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回vector第一个元素的迭代器</span></span><br><span class=\"line\">deq.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回vector最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">deq.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空vector</span></span><br><span class=\"line\">deq.<span class=\"built_in\">erase</span>(deq.<span class=\"built_in\">begin</span>());<span class=\"comment\">//删除迭代器it所指向的元素</span></span><br><span class=\"line\">deq.<span class=\"built_in\">insert</span>(deq.<span class=\"built_in\">begin</span>(), <span class=\"number\">1</span>);<span class=\"comment\">//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据下标进行遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; deq.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    cout &lt;&lt; deq[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::iterator it = deq.<span class=\"built_in\">begin</span>(); it != deq.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : deq)</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>⑦<code>map/multimap</code>：又称<code>映射</code>，定义在<code>&lt;map&gt;</code>头文件中，<code>map</code>和<code>multimap</code>的底层实现机制都是红黑树。<code>map</code>的功能是<strong>能够将任意类型的元素映射到另一个任意类型的元素上</strong>，并且所有的元素都会根据元素的键值自动排序。<code>map</code>所有的元素都是<code>pair</code>，同时拥有<code>实值</code>和<code>键值</code>，<code>pair</code>的第一元素被视为<code>键值</code>，第二元素被视为<code>实值</code>，<code>map</code>不允许两个元素有相同的键值。<code>multimap</code>和<code>map</code>的操作类似，唯一区别是<code>multimap</code>的键值允许重复。</p>\n<ul>\n<li><code>map/multimap</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; mp;<span class=\"comment\">//定义一个将string映射成int的map</span></span><br><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; mp[N];<span class=\"comment\">//定义一个map数组，其中有N个map</span></span><br><span class=\"line\">multimap&lt;string, <span class=\"type\">int</span>&gt; mulmp;<span class=\"comment\">//定义一个将string映射成int的multimap</span></span><br><span class=\"line\">multimap&lt;string, <span class=\"type\">int</span>&gt; mulmp[N];<span class=\"comment\">//定义一个multimap数组，其中有N个multimap</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>map/multimap</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//map/multimap中的常用内置函数</span></span><br><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">mp[<span class=\"string\">&quot;abc&quot;</span>] = <span class=\"number\">3</span>;<span class=\"comment\">//将&quot;abc&quot;映射到3</span></span><br><span class=\"line\">mp[<span class=\"string\">&quot;ab&quot;</span>]++;<span class=\"comment\">//将&quot;ab&quot;所映射的整数++</span></span><br><span class=\"line\">mp.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;cd&quot;</span>, <span class=\"number\">2</span>));<span class=\"comment\">//插入元素</span></span><br><span class=\"line\">mp.<span class=\"built_in\">insert</span>(&#123; <span class=\"string\">&quot;ef&quot;</span>, <span class=\"number\">5</span> &#125;);<span class=\"comment\">//同上</span></span><br><span class=\"line\">mp.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回map中元素的个数</span></span><br><span class=\"line\">mp.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回map是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">mp.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空map</span></span><br><span class=\"line\">mp.<span class=\"built_in\">erase</span>(<span class=\"string\">&quot;ef&quot;</span>);<span class=\"comment\">//清除元素&#123;&quot;ef&quot;, 5&#125;</span></span><br><span class=\"line\">mp[<span class=\"string\">&quot;abc&quot;</span>];<span class=\"comment\">//返回&quot;abc&quot;映射的值</span></span><br><span class=\"line\">mp.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回map第一个元素的迭代器</span></span><br><span class=\"line\">mp.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回map最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">mp.<span class=\"built_in\">lower_bound</span>(<span class=\"string\">&quot;abc&quot;</span>);<span class=\"comment\">//返回第一个键值大于等于&quot;abc&quot;的元素的迭代器，&#123;&quot;abc&quot;, 3&#125;</span></span><br><span class=\"line\">mp.<span class=\"built_in\">upper_bound</span>(<span class=\"string\">&quot;abc&quot;</span>);<span class=\"comment\">//返回第一个键值大于&quot;abc&quot;的元素的迭代器，&#123;&quot;cd&quot;, 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (map&lt;string, <span class=\"type\">int</span>&gt;::iterator it = mp.<span class=\"built_in\">begin</span>(); it != mp.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; (*it).first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : mp)</span><br><span class=\"line\">    cout &lt;&lt; x.first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; x.second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//扩展推断范围的for_each遍历(C++17)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;[k, v] : mp)</span><br><span class=\"line\">    cout &lt;&lt; k &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; v &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n<p>⑧<code>set/multiset</code>：又称<code>集合</code>，定义在<code>&lt;set&gt;</code>头文件中。<code>set</code>的特性是所有元素都会根据元素的键值自动被排序，<code>set</code>的元素不像<code>map</code>那样可以同时拥有<code>实值</code>和<code>键值</code>，<code>set</code>的元素既是<code>键值</code>又是<code>实值</code>，<code>set</code>不允许两个元素有相同的键值，因此总结来说就是<code>set</code>中的元素是<strong>有序且不重复的</strong>。<code>multiset</code>的特性和用法和<code>set</code>完全相同，唯一的区别在于<code>multiset</code>允许有重复元素，<code>set</code>和<code>multiset</code>的底层实现都是红黑树。</p>\n<ul>\n<li><code>set/multiset</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; st;<span class=\"comment\">//定义一个set，其中的元素类型为int</span></span><br><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; st[N];<span class=\"comment\">//定义一个set数组，其中有N个set</span></span><br><span class=\"line\">multiset&lt;<span class=\"type\">int</span>&gt; mulst;<span class=\"comment\">//定义一个multiset</span></span><br><span class=\"line\">multiset&lt;<span class=\"type\">int</span>&gt; mulst[N];<span class=\"comment\">//定义一个multiset数组，其中有N个multiset</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>set/multiset</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//set/multiset中的常用内置函数</span></span><br><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">5</span>);<span class=\"comment\">//插入元素5</span></span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">6</span>);<span class=\"comment\">//同上</span></span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">7</span>);<span class=\"comment\">//同上</span></span><br><span class=\"line\">st.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回set中元素的个数</span></span><br><span class=\"line\">st.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回set是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">st.<span class=\"built_in\">erase</span>(<span class=\"number\">6</span>);<span class=\"comment\">//清除元素6</span></span><br><span class=\"line\">st.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回set第一个元素的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回set最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空set</span></span><br><span class=\"line\">st.<span class=\"built_in\">lower_bound</span>(<span class=\"number\">5</span>);<span class=\"comment\">//返回第一个键值大于等于5的元素的迭代器，返回元素5的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">upper_bound</span>(<span class=\"number\">5</span>);<span class=\"comment\">//返回第一个键值大于5的元素的迭代器，返回元素7的迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; (*it) &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : st)</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>⑨<code>unordered_map/unordered_set</code>：分别定义在<code>&lt;unordered_map&gt;</code>与<code>&lt;unordered_set&gt;</code>头文件中，内部采用的是<code>hash</code>表结构，拥有快速检索的功能。与<code>map/set</code>相比最大的区别在于<code>unordered_map/unordered_set</code>中的元素是<strong>无序</strong>的，增删改查的时间复杂度为<code>O(1)</code>(<code>map/set</code>增删改查的时间复杂度为<code>O(logn)</code>)，但是不支持<code>lower_bound()/upper_bound()</code>函数。</p>\n<ul>\n<li><code>unordered_map/unordered_set</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unordered_set&lt;<span class=\"type\">int</span>&gt; st;<span class=\"comment\">//定义一个unordered_set，其中的元素类型为int</span></span><br><span class=\"line\">unordered_set&lt;<span class=\"type\">int</span>&gt; st[N];<span class=\"comment\">//定义一个unordered_set数组，其中有N个unordered_set</span></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;<span class=\"comment\">//定义一个unordered_map</span></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp[N];<span class=\"comment\">//定义一个unordered_map数组，其中有N个unordered_map</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>unordered_map/unordered_set</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//unordered_map/unordered_set中的常用内置函数</span></span><br><span class=\"line\">unordered_set&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">5</span>);<span class=\"comment\">//插入元素5</span></span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">6</span>);<span class=\"comment\">//同上</span></span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">7</span>);<span class=\"comment\">//同上</span></span><br><span class=\"line\">st.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回unordered_set中元素的个数</span></span><br><span class=\"line\">st.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回unordered_set是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">st.<span class=\"built_in\">erase</span>(<span class=\"number\">6</span>);<span class=\"comment\">//清除元素6</span></span><br><span class=\"line\">st.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回unordered_set第一个元素的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回unordered_set最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空unordered_set</span></span><br><span class=\"line\">mp.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));<span class=\"comment\">//插入元素&#123;1, 2&#125;</span></span><br><span class=\"line\">mp.<span class=\"built_in\">insert</span>(&#123; <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;);<span class=\"comment\">//同上</span></span><br><span class=\"line\">mp.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回unordered_map中元素的个数</span></span><br><span class=\"line\">mp.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回unordered_map是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">mp.<span class=\"built_in\">erase</span>(<span class=\"number\">3</span>);<span class=\"comment\">//清除元素&#123;3, 4&#125;</span></span><br><span class=\"line\">mp.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回unordered_map第一个元素的迭代器</span></span><br><span class=\"line\">mp.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回unordered_map最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">mp.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空unordered_map</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (unordered_set&lt;<span class=\"type\">int</span>&gt;::iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; (*it) &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : st)</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::iterator it = mp.<span class=\"built_in\">begin</span>(); it != mp.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; (*it).first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : mp)</span><br><span class=\"line\">    cout &lt;&lt; x.first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; x.second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//扩展推断范围的for_each遍历(C++17)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;[k, v] : mp)</span><br><span class=\"line\">    cout &lt;&lt; k &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; v &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、STL算法详解\"><a href=\"#四、STL算法详解\" class=\"headerlink\" title=\"四、STL算法详解\"></a>四、STL算法详解</h2><p>C++标准库定义了一组<code>泛型算法</code>，之所以称为<code>泛型</code>指的是它们可以操作在多种容器上，<strong>不但可以作用于标准库类型，还可以用在内置数组类型甚至其它类型的序列上。</strong><code>泛型算法</code>定义在<code>&lt;algorithm&gt;</code>头文件中，标准库还定义了一组<code>泛化的算术算法</code>(<code>Generalized Numeric Algorithm</code>)，定义在<code>&lt;numeric&gt;</code>头文件中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用STL容器时将数组地址改为迭代器即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//排序算法</span></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//将区间[0, 5)内元素按字典序从小到大排序</span></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a, a + <span class=\"number\">5</span>, <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());<span class=\"comment\">//将区间[0, 5)内元素按字典序从大到小排序</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//将区间[0, 5)内元素翻转</span></span><br><span class=\"line\">    <span class=\"built_in\">nth_element</span>(a, a + <span class=\"number\">3</span>, a + <span class=\"number\">5</span>);<span class=\"comment\">//将区间[0, 5)中第a + 3个数归位，即将第3大的元素放到正确的位置上，该元素前后的元素不一定有序，但左边元素都小于等于它，右边元素都大于等于它</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找与统计算法</span></span><br><span class=\"line\">    <span class=\"built_in\">find</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">3</span>);<span class=\"comment\">//在区间[0, 5)内查找等于3的元素，返回迭代器，若不存在则返回end()</span></span><br><span class=\"line\">    <span class=\"built_in\">binary_search</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">2</span>);<span class=\"comment\">//二分查找区间[0, 5)内是否存在元素2，若存在返回true否则返回false</span></span><br><span class=\"line\">    <span class=\"built_in\">count</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">3</span>);<span class=\"comment\">//返回区间[0, 5)内元素3的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可变序列算法</span></span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(a, a + <span class=\"number\">2</span>, a + <span class=\"number\">3</span>);<span class=\"comment\">//将区间[0, 2)的元素复制到以a+3开始的区间，即[3, 5)</span></span><br><span class=\"line\">    <span class=\"built_in\">replace</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);<span class=\"comment\">//将区间[0, 5)内等于3的元素替换为4</span></span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">1</span>);<span class=\"comment\">//将1写入区间[0, 5)中(初始化数组函数)</span></span><br><span class=\"line\">    <span class=\"built_in\">unique</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//将相邻元素间的重复元素全部移动至末端，返回去重之后数组最后一个元素之后的地址</span></span><br><span class=\"line\">    <span class=\"built_in\">remove</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">3</span>);<span class=\"comment\">//将区间[0, 5)中的元素3移至末端，返回新数组最后一个元素之后的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//排列算法</span></span><br><span class=\"line\">    <span class=\"built_in\">next_permutation</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//产生下一个排列&#123; 1, 2, 3, 5, 4 &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">prev_permutation</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//产生上一个排列&#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前缀和算法</span></span><br><span class=\"line\">    <span class=\"built_in\">partial_sum</span>(a, a + <span class=\"number\">5</span>, a);<span class=\"comment\">//计算数组a在区间[0, 5)内的前缀和并将结果保存至数组a中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"excerpt":"","more":"<h1 id=\"算法竞赛C-STL详解\"><a href=\"#算法竞赛C-STL详解\" class=\"headerlink\" title=\"算法竞赛C++ STL详解\"></a>算法竞赛C++ STL详解</h1><hr>\n<p>本蒟蒻写这篇分享的目的一个是为了写一个归纳总结方便自己以后随时能够复习还有就是给那些对STL还不是很了解的萌新介绍一下什么是STL以及如何使用STL更高效(偷懒)地解题。本篇文章将会长期更新~欢迎大家一起监督学习~有错误的地方或者需要补充的欢迎在评论区留言哦~</p>\n<h2 id=\"一、什么是STL\"><a href=\"#一、什么是STL\" class=\"headerlink\" title=\"一、什么是STL?\"></a>一、什么是STL?</h2><p>STL(<code>Standard Template Library</code>，标准模板库)，是惠普实验室开发的一系列软件的统称。现主要出现在C++中，STL从广义上分为：容器(<code>container</code>)、算法(<code>algorithm</code>)和迭代器(<code>iterator</code>)。STL几乎所有的代码都采用了<strong>模板类或者模板函数</strong>，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。</p>\n<h2 id=\"二、STL六大组件是什么\"><a href=\"#二、STL六大组件是什么\" class=\"headerlink\" title=\"二、STL六大组件是什么?\"></a>二、STL六大组件是什么?</h2><p>STL提供了六大组件，彼此之间可以组合套用，这六大组件分别是容器、算法、迭代器、仿函数、适配器、空间配置器。其中，在算法竞赛中用到最多的为<strong>容器、算法与迭代器</strong>。</p>\n<ul>\n<li>容器(<code>Container</code>)：STL容器为各种<strong>数据结构</strong>，如<code>vector</code>、<code>stack</code>、<code>queue</code>、<code>map</code>、<code>set</code>等，用来存放数据，从实现角度来看，STL容器是一种<code>class template</code>。</li>\n<li>算法(<code>Algorithm</code>)：STL的算法多数定义在<code>&lt;algorithm&gt;</code>头文件中，其中包括了各种常用的算法，如<code>sort</code>、<code>find</code>、<code>copy</code>、<code>reverse</code>等，从实现角度来看，STL算法是一种<code>function template</code>。</li>\n<li>迭代器(<code>Iterator</code>)：STL迭代器扮演了容器与算法之间的胶合剂，共有五种类型，从实现角度来看，迭代器是一种将<code>opetator*</code>、<code>opetator-&gt;</code>、<code>operator++</code>等指针相关操作予以重载的<code>class template</code>。所有STL容器都附带有自己专属的迭代器，只有容器的设计者才知道如何遍历自己的元素。</li>\n<li>仿函数(<code>Functor</code>)：行为类似函数，可作为算法的某种策略，从实现角度来看，仿函数是一种重载了<code>operator()</code>的<code>class</code>或者<code>class template</code>。</li>\n<li>适配器(<code>Adaptor</code>)：一种用来修饰容器或仿函数或迭代器接口的东西。</li>\n<li>空间配置器(<code>Allocator</code>)：负责空间的配置与管理。从实现角度来看，配置器是一个实现了动态空间配置、空间管理、空间释放的<code>class template</code>。</li>\n</ul>\n<h2 id=\"三、STL容器详解\"><a href=\"#三、STL容器详解\" class=\"headerlink\" title=\"三、STL容器详解\"></a>三、STL容器详解</h2><p>相信很多人学习STL就是为了在比赛中能够更好地装B运用各种数据结构和算法，提高解题速度。确实，使用STL中的容器能够不需要自己手写定义各种数据结构，使用STL中的算法能够不需要自己手写实现各种基本算法，因此本部分对于算法巨巨们是最为重要的一部分，那么STL容器究竟有哪些呢?在做题中该如何使用呢?</p>\n<p>① <code>vector</code>：又称<code>变长数组</code>，定义在<code>&lt;vector&gt;</code>头文件中，<code>vector</code>容器是<strong>动态空间</strong>，随着元素的加入，它的内部机制会自动扩充空间以容纳新的元素。因此<code>vector</code>的运用对于内存的合理利用与运用的灵活性有很大的帮助。</p>\n<ul>\n<li><code>vector</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v;<span class=\"comment\">//定义一个vector，其中的元素为int类型</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v[N];<span class=\"comment\">//定义一个vector数组，其中有N个vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(len)</span></span>;<span class=\"comment\">//定义一个长度为len的vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(len, x)</span></span>;<span class=\"comment\">//定义一个长度为len的vector，初始化每个元素为x</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(v1)</span></span>;<span class=\"comment\">//用v1给v2赋值，v1的类型为vector</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v2</span><span class=\"params\">(v1.begin(), v1.begin() + <span class=\"number\">3</span>)</span></span>;<span class=\"comment\">//将v1中第0~2三个元素赋值给v2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>vector</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//vector中的常用内置函数</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; v = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;<span class=\"comment\">//初始化vector，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>();<span class=\"comment\">//定义vector的迭代器，指向begin()</span></span><br><span class=\"line\"></span><br><span class=\"line\">v.<span class=\"built_in\">push_back</span>(<span class=\"number\">4</span>);<span class=\"comment\">//在vector的尾部插入元素4，v:&#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\">v.<span class=\"built_in\">pop_back</span>();<span class=\"comment\">//删除vector的最后一个元素，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">v.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回vector中元素的个数</span></span><br><span class=\"line\">v.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回vector是否为空，若为空则返回true否则返回false</span></span><br><span class=\"line\">v.<span class=\"built_in\">front</span>();<span class=\"comment\">//返回vector中的第一个元素</span></span><br><span class=\"line\">v.<span class=\"built_in\">back</span>();<span class=\"comment\">//返回vector中的最后一个元素</span></span><br><span class=\"line\">v.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回vector第一个元素的迭代器</span></span><br><span class=\"line\">v.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回vector最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">v.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空vector</span></span><br><span class=\"line\">v.<span class=\"built_in\">erase</span>(v.<span class=\"built_in\">begin</span>());<span class=\"comment\">//删除迭代器it所指向的元素</span></span><br><span class=\"line\">v.<span class=\"built_in\">insert</span>(v.<span class=\"built_in\">begin</span>(), <span class=\"number\">1</span>);<span class=\"comment\">//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据下标进行遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    cout &lt;&lt; v[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (vector&lt;<span class=\"type\">int</span>&gt;::iterator it = v.<span class=\"built_in\">begin</span>(); it != v.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : v)</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>②<code>stack</code>：又称<code>栈</code>，是一种<strong>后进先出</strong>(<code>Last In First Out，LIFO</code>)的数据结构，定义在<code>&lt;stack&gt;</code>头文件中，<code>stack</code>容器允许新增元素、移除元素、取得栈顶元素，但是除了最顶端以外，没有任何方法可以存取<code>stack</code>的其它元素，换言之，<code>stack</code><strong>不允许有遍历行为</strong>。</p>\n<ul>\n<li><code>stack</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; stk;<span class=\"comment\">//定义一个stack，其中元素的类型为int</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; stk[N];<span class=\"comment\">//定义一个stack数组，其中有N个stack</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>stack</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//stack中的常用内置函数</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; stk;</span><br><span class=\"line\">stk.<span class=\"built_in\">push</span>(x);<span class=\"comment\">//在stack中插入元素x</span></span><br><span class=\"line\">stk.<span class=\"built_in\">pop</span>();<span class=\"comment\">//弹出stack的栈顶元素</span></span><br><span class=\"line\">stk.<span class=\"built_in\">top</span>();<span class=\"comment\">//返回stack的栈顶元素</span></span><br><span class=\"line\">stk.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回stack中元素的个数</span></span><br><span class=\"line\">stk.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回stack是否为空，若为空则返回true否则返回false</span></span><br></pre></td></tr></table></figure>\n<p>③<code>string</code>：又称字符串，定义在<code>&lt;string&gt;</code>头文件中。C风格的字符串(以空字符结尾的字符数组)太过复杂难于掌握，因此C++标准库定义了一种<code>string</code>类。<code>string</code>玩得好，天梯和蓝桥拿个国奖真的有手就行。因此熟练地运用<code>string</code>还是很重要滴~</p>\n<ul>\n<li><code>string</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string str;<span class=\"comment\">//定义一个空的字符串</span></span><br><span class=\"line\">string str[N];<span class=\"comment\">//定义一个string数组，其中有N个string</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"number\">5</span>, <span class=\"string\">&#x27;a&#x27;</span>)</span></span>;<span class=\"comment\">//使用5个字符&#x27;a&#x27;初始化</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;abc&quot;</span>)</span></span>;<span class=\"comment\">//使用字符串初始化</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>string</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//string中的常用内置函数</span></span><br><span class=\"line\">   <span class=\"function\">string <span class=\"title\">str</span><span class=\"params\">(<span class=\"string\">&quot;abcabc&quot;</span>)</span></span>;</span><br><span class=\"line\">   str.<span class=\"built_in\">push_back</span>(<span class=\"string\">&#x27;d&#x27;</span>);<span class=\"comment\">//在string尾部插入字符，&quot;abcabcd&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">pop_back</span>();<span class=\"comment\">//删除string尾部的字符，&quot;abcabc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">length</span>();<span class=\"comment\">//返回string中字符的个数</span></span><br><span class=\"line\">   str.<span class=\"built_in\">size</span>();<span class=\"comment\">//作用与length()相同</span></span><br><span class=\"line\">   str.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回string是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">   str.<span class=\"built_in\">substr</span>(<span class=\"number\">1</span>);<span class=\"comment\">//返回string中从下标为1开始至末尾的子串，&quot;bc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>);<span class=\"comment\">//返回string中从下标为0开始长度为2的子串，&quot;ab&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&#x27;x&#x27;</span>);<span class=\"comment\">//在下标为1的字符前插入2个字符&#x27;x&#x27;，&quot;axxbcabc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">insert</span>(<span class=\"number\">1</span>, <span class=\"string\">&quot;yy&quot;</span>);<span class=\"comment\">//在下标为1的字符前插入字符串&quot;yy&quot;，&quot;ayyxxbcabc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">erase</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>);<span class=\"comment\">//删除从位置1开始的4个字符，&quot;abcabc&quot;</span></span><br><span class=\"line\">   str.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;b&#x27;</span>);<span class=\"comment\">//返回字符&#x27;b&#x27;在string中第一次出现的位置，返回1</span></span><br><span class=\"line\">   str.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">2</span>);<span class=\"comment\">//返回从位置2开始字符&#x27;b&#x27;在string中第一次出现的位置，返回4</span></span><br><span class=\"line\">   str.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;bc&quot;</span>);<span class=\"comment\">//同上，返回字符串第一次出现的位置，返回1</span></span><br><span class=\"line\">   str.<span class=\"built_in\">find</span>(<span class=\"string\">&quot;bc&quot;</span>, <span class=\"number\">2</span>);<span class=\"comment\">//返回4</span></span><br><span class=\"line\">   str.<span class=\"built_in\">rfind</span>(<span class=\"string\">&#x27;b&#x27;</span>);<span class=\"comment\">//反向查找，原理同上，返回4</span></span><br><span class=\"line\">   str.<span class=\"built_in\">rfind</span>(<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"number\">3</span>);<span class=\"comment\">//返回1</span></span><br><span class=\"line\">   str.<span class=\"built_in\">rfind</span>(<span class=\"string\">&quot;bc&quot;</span>);<span class=\"comment\">//返回4</span></span><br><span class=\"line\">   str.<span class=\"built_in\">rfind</span>(<span class=\"string\">&quot;bc&quot;</span>, <span class=\"number\">3</span>);<span class=\"comment\">//返回1</span></span><br><span class=\"line\">   str[<span class=\"number\">0</span>];<span class=\"comment\">//用下标访问string中的字符</span></span><br><span class=\"line\">   cout &lt;&lt; (str == str) &lt;&lt; endl;<span class=\"comment\">//string可比较大小，按字典序</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>string</code>的<code>erase()</code>与<code>remove()</code>函数的用法</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//string中erase()与remove()的用法</span></span><br><span class=\"line\">string str1, str2, str3, str4, str5;</span><br><span class=\"line\">str1 = str2 = str3 = str4 = str5 = <span class=\"string\">&quot;I love AcWing! It&#x27;s very funny!&quot;</span>;</span><br><span class=\"line\">str1.<span class=\"built_in\">erase</span>(<span class=\"number\">15</span>);<span class=\"comment\">//删除[15,end())的所有元素，&quot;I love AcWing!&quot;</span></span><br><span class=\"line\">str2.<span class=\"built_in\">erase</span>(<span class=\"number\">6</span>, <span class=\"number\">11</span>);<span class=\"comment\">//从第6个元素(包括)开始往后删除11个元素，&quot;I love&#x27;s very funny!&quot;</span></span><br><span class=\"line\">str3.<span class=\"built_in\">erase</span>(str3.<span class=\"built_in\">begin</span>() + <span class=\"number\">2</span>);<span class=\"comment\">//删除迭代器所指的元素，&quot;I ove AcWing! It&#x27;s very funny!&quot;</span></span><br><span class=\"line\">str4.<span class=\"built_in\">erase</span>(str4.<span class=\"built_in\">begin</span>() + <span class=\"number\">7</span>, str4.<span class=\"built_in\">end</span>() - <span class=\"number\">11</span>);<span class=\"comment\">//删除[str4.begin()+7,str4.end()-11)的所有元素，&quot;I love very funny!&quot;</span></span><br><span class=\"line\">str5.<span class=\"built_in\">erase</span>(<span class=\"built_in\">remove</span>(str5.<span class=\"built_in\">begin</span>(), str5.<span class=\"built_in\">end</span>(), <span class=\"string\">&#x27;n&#x27;</span>), str5.<span class=\"built_in\">end</span>());<span class=\"comment\">//删除[str5.begin(),str5.end())中所有字符&#x27;n&#x27;，&quot;I love AcWig! It&#x27;s very fuy!&quot;</span></span><br></pre></td></tr></table></figure>\n<p>④<code>queue</code>：又称<code>队列</code>，是一种<strong>先进先出</strong>(<code>First In First Out，FIFO</code>)的数据结构，定义在<code>&lt;queue&gt;</code>头文件中，<code>queue</code>容器允许从一端(称为<code>队尾</code>)新增元素(<code>入队</code>)，从另一端(称为<code>队头</code>)移除元素(<code>出队</code>)。<br>⑤<code>priority_queue</code>：又称<code>优先队列</code>，同样定义在<code>&lt;queue&gt;</code>头文件中，与<code>queue</code>不同的地方在于我们可以自定义其中数据的优先级，优先级高的排在队列前面，优先出队。<code>priority_queue</code>具有<code>queue</code>的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它的本质是用<code>堆</code>实现的，因此可分为<code>小根堆</code>与<code>大根堆</code>，<code>小根堆</code>中较小的元素排在前面，<code>大根堆</code>中较大的元素排在前面。<strong>注意：创建<code>priority_queue</code>时默认是<code>大根堆</code>！</strong></p>\n<ul>\n<li><code>queue</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; que;<span class=\"comment\">//定义一个queue，其中元素的类型为int</span></span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; que[N];<span class=\"comment\">//定义一个queue数组，其中有N个queue</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; bigHeap;<span class=\"comment\">//定义一个大根堆</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt; &gt; smallHeap;<span class=\"comment\">//定义一个小根堆</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>queue</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//queue中的常用内置函数</span></span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; que;</span><br><span class=\"line\">que.<span class=\"built_in\">push</span>(x);<span class=\"comment\">//在queue的队尾插入元素x</span></span><br><span class=\"line\">que.<span class=\"built_in\">pop</span>();<span class=\"comment\">//出队queue的队头元素</span></span><br><span class=\"line\">que.<span class=\"built_in\">front</span>();<span class=\"comment\">//返回queue的队头元素</span></span><br><span class=\"line\">que.<span class=\"built_in\">back</span>();<span class=\"comment\">//返回queue的队尾元素</span></span><br><span class=\"line\">que.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回stack中元素的个数</span></span><br><span class=\"line\">que.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回stack是否为空，若为空则返回true否则返回false</span></span><br></pre></td></tr></table></figure>\n<p>⑥<code>deque</code>：又称<code>双端队列</code>，定义在<code>&lt;deque&gt;</code>头文件中，<code>vector</code>容器是单向开口的连续内存空间，<code>deque</code>则是一种<strong>双向开口的连续线性空间</strong>。所谓的双向开口，意思是可以在头尾两端分别做元素的插入和删除操作，当然，<code>vector</code>也可以在头尾两端插入元素，但是在其头部进行插入操作效率奇差，无法被接受。<code>deque</code>和<code>vector</code>最大的差异一是在于<code>deque</code>允许使用常数项时间在头部进行元素的插入和删除操作，二是在于<code>deque</code>没有容量的概念，因为它是动态的以分段连续空间组合而成，随时可以增加一段新的空间并链接起来。</p>\n<ul>\n<li><code>deque</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt; deq;<span class=\"comment\">//定义一个deque，其中的元素为int类型</span></span><br><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt; deq[N];<span class=\"comment\">//定义一个deque数组，其中有N个deque</span></span><br><span class=\"line\"><span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">deq</span><span class=\"params\">(len)</span></span>;<span class=\"comment\">//定义一个长度为len的deque</span></span><br><span class=\"line\"><span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">deq</span><span class=\"params\">(len, x)</span></span>;<span class=\"comment\">//定义一个长度为len的deque，初始化每个元素为x</span></span><br><span class=\"line\"><span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">deq2</span><span class=\"params\">(deq1)</span></span>;<span class=\"comment\">//用deq1给v2赋值，deq2的类型为deque</span></span><br><span class=\"line\"><span class=\"function\">deque&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">deq2</span><span class=\"params\">(deq1.begin(), deq1.begin() + <span class=\"number\">3</span>)</span></span>;<span class=\"comment\">//将deq1中第0~2三个元素赋值给deq2</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>deque</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//deque中的常用内置函数</span></span><br><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt; deq = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;<span class=\"comment\">//初始化vector，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt;::iterator it = deq.<span class=\"built_in\">begin</span>();<span class=\"comment\">//定义vector的迭代器，指向begin()</span></span><br><span class=\"line\"></span><br><span class=\"line\">deq.<span class=\"built_in\">push_back</span>(<span class=\"number\">4</span>);<span class=\"comment\">//在deque的尾部插入元素4，v:&#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\">deq.<span class=\"built_in\">pop_back</span>();<span class=\"comment\">//删除deque的尾部元素，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">deq.<span class=\"built_in\">push_front</span>(<span class=\"number\">4</span>);<span class=\"comment\">//在deque的头部插入元素4，v:&#123;4, 1, 2, 3&#125;</span></span><br><span class=\"line\">deq.<span class=\"built_in\">pop_front</span>();<span class=\"comment\">//删除deque的头部元素，v:&#123;1, 2, 3&#125;</span></span><br><span class=\"line\">deq.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回vector中元素的个数</span></span><br><span class=\"line\">deq.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回vector是否为空，若为空则返回true否则返回false</span></span><br><span class=\"line\">deq.<span class=\"built_in\">front</span>();<span class=\"comment\">//返回vector中的第一个元素</span></span><br><span class=\"line\">deq.<span class=\"built_in\">back</span>();<span class=\"comment\">//返回vector中的最后一个元素</span></span><br><span class=\"line\">deq.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回vector第一个元素的迭代器</span></span><br><span class=\"line\">deq.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回vector最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">deq.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空vector</span></span><br><span class=\"line\">deq.<span class=\"built_in\">erase</span>(deq.<span class=\"built_in\">begin</span>());<span class=\"comment\">//删除迭代器it所指向的元素</span></span><br><span class=\"line\">deq.<span class=\"built_in\">insert</span>(deq.<span class=\"built_in\">begin</span>(), <span class=\"number\">1</span>);<span class=\"comment\">//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据下标进行遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; deq.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    cout &lt;&lt; deq[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (deque&lt;<span class=\"type\">int</span>&gt;::iterator it = deq.<span class=\"built_in\">begin</span>(); it != deq.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : deq)</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>⑦<code>map/multimap</code>：又称<code>映射</code>，定义在<code>&lt;map&gt;</code>头文件中，<code>map</code>和<code>multimap</code>的底层实现机制都是红黑树。<code>map</code>的功能是<strong>能够将任意类型的元素映射到另一个任意类型的元素上</strong>，并且所有的元素都会根据元素的键值自动排序。<code>map</code>所有的元素都是<code>pair</code>，同时拥有<code>实值</code>和<code>键值</code>，<code>pair</code>的第一元素被视为<code>键值</code>，第二元素被视为<code>实值</code>，<code>map</code>不允许两个元素有相同的键值。<code>multimap</code>和<code>map</code>的操作类似，唯一区别是<code>multimap</code>的键值允许重复。</p>\n<ul>\n<li><code>map/multimap</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; mp;<span class=\"comment\">//定义一个将string映射成int的map</span></span><br><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; mp[N];<span class=\"comment\">//定义一个map数组，其中有N个map</span></span><br><span class=\"line\">multimap&lt;string, <span class=\"type\">int</span>&gt; mulmp;<span class=\"comment\">//定义一个将string映射成int的multimap</span></span><br><span class=\"line\">multimap&lt;string, <span class=\"type\">int</span>&gt; mulmp[N];<span class=\"comment\">//定义一个multimap数组，其中有N个multimap</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>map/multimap</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//map/multimap中的常用内置函数</span></span><br><span class=\"line\">map&lt;string, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">mp[<span class=\"string\">&quot;abc&quot;</span>] = <span class=\"number\">3</span>;<span class=\"comment\">//将&quot;abc&quot;映射到3</span></span><br><span class=\"line\">mp[<span class=\"string\">&quot;ab&quot;</span>]++;<span class=\"comment\">//将&quot;ab&quot;所映射的整数++</span></span><br><span class=\"line\">mp.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"string\">&quot;cd&quot;</span>, <span class=\"number\">2</span>));<span class=\"comment\">//插入元素</span></span><br><span class=\"line\">mp.<span class=\"built_in\">insert</span>(&#123; <span class=\"string\">&quot;ef&quot;</span>, <span class=\"number\">5</span> &#125;);<span class=\"comment\">//同上</span></span><br><span class=\"line\">mp.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回map中元素的个数</span></span><br><span class=\"line\">mp.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回map是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">mp.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空map</span></span><br><span class=\"line\">mp.<span class=\"built_in\">erase</span>(<span class=\"string\">&quot;ef&quot;</span>);<span class=\"comment\">//清除元素&#123;&quot;ef&quot;, 5&#125;</span></span><br><span class=\"line\">mp[<span class=\"string\">&quot;abc&quot;</span>];<span class=\"comment\">//返回&quot;abc&quot;映射的值</span></span><br><span class=\"line\">mp.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回map第一个元素的迭代器</span></span><br><span class=\"line\">mp.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回map最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">mp.<span class=\"built_in\">lower_bound</span>(<span class=\"string\">&quot;abc&quot;</span>);<span class=\"comment\">//返回第一个键值大于等于&quot;abc&quot;的元素的迭代器，&#123;&quot;abc&quot;, 3&#125;</span></span><br><span class=\"line\">mp.<span class=\"built_in\">upper_bound</span>(<span class=\"string\">&quot;abc&quot;</span>);<span class=\"comment\">//返回第一个键值大于&quot;abc&quot;的元素的迭代器，&#123;&quot;cd&quot;, 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (map&lt;string, <span class=\"type\">int</span>&gt;::iterator it = mp.<span class=\"built_in\">begin</span>(); it != mp.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; (*it).first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : mp)</span><br><span class=\"line\">    cout &lt;&lt; x.first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; x.second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//扩展推断范围的for_each遍历(C++17)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;[k, v] : mp)</span><br><span class=\"line\">    cout &lt;&lt; k &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; v &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n<p>⑧<code>set/multiset</code>：又称<code>集合</code>，定义在<code>&lt;set&gt;</code>头文件中。<code>set</code>的特性是所有元素都会根据元素的键值自动被排序，<code>set</code>的元素不像<code>map</code>那样可以同时拥有<code>实值</code>和<code>键值</code>，<code>set</code>的元素既是<code>键值</code>又是<code>实值</code>，<code>set</code>不允许两个元素有相同的键值，因此总结来说就是<code>set</code>中的元素是<strong>有序且不重复的</strong>。<code>multiset</code>的特性和用法和<code>set</code>完全相同，唯一的区别在于<code>multiset</code>允许有重复元素，<code>set</code>和<code>multiset</code>的底层实现都是红黑树。</p>\n<ul>\n<li><code>set/multiset</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; st;<span class=\"comment\">//定义一个set，其中的元素类型为int</span></span><br><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; st[N];<span class=\"comment\">//定义一个set数组，其中有N个set</span></span><br><span class=\"line\">multiset&lt;<span class=\"type\">int</span>&gt; mulst;<span class=\"comment\">//定义一个multiset</span></span><br><span class=\"line\">multiset&lt;<span class=\"type\">int</span>&gt; mulst[N];<span class=\"comment\">//定义一个multiset数组，其中有N个multiset</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>set/multiset</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//set/multiset中的常用内置函数</span></span><br><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">5</span>);<span class=\"comment\">//插入元素5</span></span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">6</span>);<span class=\"comment\">//同上</span></span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">7</span>);<span class=\"comment\">//同上</span></span><br><span class=\"line\">st.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回set中元素的个数</span></span><br><span class=\"line\">st.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回set是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">st.<span class=\"built_in\">erase</span>(<span class=\"number\">6</span>);<span class=\"comment\">//清除元素6</span></span><br><span class=\"line\">st.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回set第一个元素的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回set最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空set</span></span><br><span class=\"line\">st.<span class=\"built_in\">lower_bound</span>(<span class=\"number\">5</span>);<span class=\"comment\">//返回第一个键值大于等于5的元素的迭代器，返回元素5的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">upper_bound</span>(<span class=\"number\">5</span>);<span class=\"comment\">//返回第一个键值大于5的元素的迭代器，返回元素7的迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (set&lt;<span class=\"type\">int</span>&gt;::iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; (*it) &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : st)</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>⑨<code>unordered_map/unordered_set</code>：分别定义在<code>&lt;unordered_map&gt;</code>与<code>&lt;unordered_set&gt;</code>头文件中，内部采用的是<code>hash</code>表结构，拥有快速检索的功能。与<code>map/set</code>相比最大的区别在于<code>unordered_map/unordered_set</code>中的元素是<strong>无序</strong>的，增删改查的时间复杂度为<code>O(1)</code>(<code>map/set</code>增删改查的时间复杂度为<code>O(logn)</code>)，但是不支持<code>lower_bound()/upper_bound()</code>函数。</p>\n<ul>\n<li><code>unordered_map/unordered_set</code>的定义方式</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unordered_set&lt;<span class=\"type\">int</span>&gt; st;<span class=\"comment\">//定义一个unordered_set，其中的元素类型为int</span></span><br><span class=\"line\">unordered_set&lt;<span class=\"type\">int</span>&gt; st[N];<span class=\"comment\">//定义一个unordered_set数组，其中有N个unordered_set</span></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;<span class=\"comment\">//定义一个unordered_map</span></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp[N];<span class=\"comment\">//定义一个unordered_map数组，其中有N个unordered_map</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>unordered_map/unordered_set</code>的常用内置函数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//unordered_map/unordered_set中的常用内置函数</span></span><br><span class=\"line\">unordered_set&lt;<span class=\"type\">int</span>&gt; st;</span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">5</span>);<span class=\"comment\">//插入元素5</span></span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">6</span>);<span class=\"comment\">//同上</span></span><br><span class=\"line\">st.<span class=\"built_in\">insert</span>(<span class=\"number\">7</span>);<span class=\"comment\">//同上</span></span><br><span class=\"line\">st.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回unordered_set中元素的个数</span></span><br><span class=\"line\">st.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回unordered_set是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">st.<span class=\"built_in\">erase</span>(<span class=\"number\">6</span>);<span class=\"comment\">//清除元素6</span></span><br><span class=\"line\">st.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回unordered_set第一个元素的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回unordered_set最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">st.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空unordered_set</span></span><br><span class=\"line\">mp.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>));<span class=\"comment\">//插入元素&#123;1, 2&#125;</span></span><br><span class=\"line\">mp.<span class=\"built_in\">insert</span>(&#123; <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;);<span class=\"comment\">//同上</span></span><br><span class=\"line\">mp.<span class=\"built_in\">size</span>();<span class=\"comment\">//返回unordered_map中元素的个数</span></span><br><span class=\"line\">mp.<span class=\"built_in\">empty</span>();<span class=\"comment\">//返回unordered_map是否为空，若为空返回true否则返回false</span></span><br><span class=\"line\">mp.<span class=\"built_in\">erase</span>(<span class=\"number\">3</span>);<span class=\"comment\">//清除元素&#123;3, 4&#125;</span></span><br><span class=\"line\">mp.<span class=\"built_in\">begin</span>();<span class=\"comment\">//返回unordered_map第一个元素的迭代器</span></span><br><span class=\"line\">mp.<span class=\"built_in\">end</span>();<span class=\"comment\">//返回unordered_map最后一个元素后一个位置的迭代器</span></span><br><span class=\"line\">mp.<span class=\"built_in\">clear</span>();<span class=\"comment\">//清空unordered_map</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (unordered_set&lt;<span class=\"type\">int</span>&gt;::iterator it = st.<span class=\"built_in\">begin</span>(); it != st.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; (*it) &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : st)</span><br><span class=\"line\">    cout &lt;&lt; x &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用迭代器遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;::iterator it = mp.<span class=\"built_in\">begin</span>(); it != mp.<span class=\"built_in\">end</span>(); it++)</span><br><span class=\"line\">    cout &lt;&lt; (*it).first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//for_each遍历(C++11)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x : mp)</span><br><span class=\"line\">    cout &lt;&lt; x.first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; x.second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//扩展推断范围的for_each遍历(C++17)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;[k, v] : mp)</span><br><span class=\"line\">    cout &lt;&lt; k &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; v &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、STL算法详解\"><a href=\"#四、STL算法详解\" class=\"headerlink\" title=\"四、STL算法详解\"></a>四、STL算法详解</h2><p>C++标准库定义了一组<code>泛型算法</code>，之所以称为<code>泛型</code>指的是它们可以操作在多种容器上，<strong>不但可以作用于标准库类型，还可以用在内置数组类型甚至其它类型的序列上。</strong><code>泛型算法</code>定义在<code>&lt;algorithm&gt;</code>头文件中，标准库还定义了一组<code>泛化的算术算法</code>(<code>Generalized Numeric Algorithm</code>)，定义在<code>&lt;numeric&gt;</code>头文件中。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用STL容器时将数组地址改为迭代器即可</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//排序算法</span></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//将区间[0, 5)内元素按字典序从小到大排序</span></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a, a + <span class=\"number\">5</span>, <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());<span class=\"comment\">//将区间[0, 5)内元素按字典序从大到小排序</span></span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//将区间[0, 5)内元素翻转</span></span><br><span class=\"line\">    <span class=\"built_in\">nth_element</span>(a, a + <span class=\"number\">3</span>, a + <span class=\"number\">5</span>);<span class=\"comment\">//将区间[0, 5)中第a + 3个数归位，即将第3大的元素放到正确的位置上，该元素前后的元素不一定有序，但左边元素都小于等于它，右边元素都大于等于它</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找与统计算法</span></span><br><span class=\"line\">    <span class=\"built_in\">find</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">3</span>);<span class=\"comment\">//在区间[0, 5)内查找等于3的元素，返回迭代器，若不存在则返回end()</span></span><br><span class=\"line\">    <span class=\"built_in\">binary_search</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">2</span>);<span class=\"comment\">//二分查找区间[0, 5)内是否存在元素2，若存在返回true否则返回false</span></span><br><span class=\"line\">    <span class=\"built_in\">count</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">3</span>);<span class=\"comment\">//返回区间[0, 5)内元素3的个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//可变序列算法</span></span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(a, a + <span class=\"number\">2</span>, a + <span class=\"number\">3</span>);<span class=\"comment\">//将区间[0, 2)的元素复制到以a+3开始的区间，即[3, 5)</span></span><br><span class=\"line\">    <span class=\"built_in\">replace</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);<span class=\"comment\">//将区间[0, 5)内等于3的元素替换为4</span></span><br><span class=\"line\">    <span class=\"built_in\">fill</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">1</span>);<span class=\"comment\">//将1写入区间[0, 5)中(初始化数组函数)</span></span><br><span class=\"line\">    <span class=\"built_in\">unique</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//将相邻元素间的重复元素全部移动至末端，返回去重之后数组最后一个元素之后的地址</span></span><br><span class=\"line\">    <span class=\"built_in\">remove</span>(a, a + <span class=\"number\">5</span>, <span class=\"number\">3</span>);<span class=\"comment\">//将区间[0, 5)中的元素3移至末端，返回新数组最后一个元素之后的地址</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//排列算法</span></span><br><span class=\"line\">    <span class=\"built_in\">next_permutation</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//产生下一个排列&#123; 1, 2, 3, 5, 4 &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">prev_permutation</span>(a, a + <span class=\"number\">5</span>);<span class=\"comment\">//产生上一个排列&#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前缀和算法</span></span><br><span class=\"line\">    <span class=\"built_in\">partial_sum</span>(a, a + <span class=\"number\">5</span>, a);<span class=\"comment\">//计算数组a在区间[0, 5)内的前缀和并将结果保存至数组a中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"article title","date":"2022-03-13T10:49:59.000Z","_content":"Hello, this is my blog.","source":"_posts/article-title.md","raw":"---\ntitle: article title\ndate: 2022-03-13 18:49:59\ntags:\n---\nHello, this is my blog.","slug":"article-title","published":1,"updated":"2022-03-13T10:50:29.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0s106bw00035oo4431o0kli","content":"<p>Hello, this is my blog.</p>\n","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"cover":"/img/postface3.jpg","excerpt":"","more":"<p>Hello, this is my blog.</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-11-07T06:52:48.261Z","updated":"2022-03-15T11:03:26.000Z","_id":"cl0s106bz00075oo489p7al2e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"算法竞赛代码片段记录","date":"2021-12-02T22:06:00.000Z","toc":true,"mathjax":false,"_content":"\n# 代码片段记录\n\n## 代码加速相关\n\n### 加速输入\n\n```cpp\nint getin()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=x*10+ch-48,ch=getchar();\n\treturn x;\n}\n```\n\n### 高级输入输出\n\n```cpp\n#include<bits/stdc++.h>\n#define lson (o<<1)\n#define rson (o<<1|1)\n#define fi first\n#define sc second\n#define dbg(x) cout<<#x<<\" = \"<<(x)<<endl;\ntypedef long long ll;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\nusing namespace std;\nconst double pi=acos(-1);\nconst double eps=1e-6;\ninline int lowbit(int x){return x&(-x);}\ninline int read(){\n\tint f=1,x=0;char ch;\n\tdo{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n\tdo{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n\treturn f*x;\n}\ntemplate<typename T> inline T max(T x,T y,T z){return max(max(x,y),z);}\ntemplate<typename T> inline T min(T x,T y,T z){return min(min(x,y),z);}\ntemplate<typename T> inline T sqr(T x){return x*x;}\ntemplate<typename T> inline void checkmax(T &x,T y){x=max(x,y);}\ntemplate<typename T> inline void checkmin(T &x,T y){x=min(x,y);}\ntemplate<typename T> inline void read(T &x){\nx=0;T f=1;char ch;do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\ndo x=x*10+ch-'0',ch=getchar();while(ch<='9'&&ch>='0');x*=f;\n}\ntemplate<typename A,typename B,typename C> inline A fpow(A x,B p,C yql){\n\tA ans=1;\n\tfor(;p;p>>=1,x=1LL*x*x%yql)if(p&1)ans=1LL*x*ans%yql;\n\treturn ans;\n}\nstruct FastIO{\n\tstatic const int S=1310720;\n\tint wpos;char wbuf[S];\n\tFastIO():wpos(0) {}\n\tinline int xchar(){\n\t\tstatic char buf[S];\n\t\tstatic int len=0,pos=0;\n\t\tif(pos==len)pos=0,len=fread(buf,1,S,stdin);\n\t\tif(pos==len)return -1;\n\t\treturn buf[pos++];\n\t}\n\tinline int read(){\n\t\tint c=xchar(),x=0;\n\t\twhile(c<=32&&~c)c=xchar();\n\t\tif(c==-1)return -1;\n\t\tfor(;'0'<=c&&c<='9';c=xchar())x=x*10+c-'0';\n\t\treturn x;\n\t}\n}io;\n//#define read io.read\n```\n\n## STL拓展\n\n### StringStream分割字符串(首选，速度最快)\n\n#### 默认分割空格、tab、回车换行\n\n```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n \nusing namespace std;\n \nint main() {\n    string str = \"hello world sperated by   spaces\\tand\\nhuiche\";\n \n    vector<string> arr;\n    istringstream ss(str);\n    string word;\n    while(ss>>word) {\n        arr.push_back(word);\n    }\n \n    for(size_t i=0; i<arr.size(); i++) {\n        cout << arr[i] << endl;\n    }\n     \n    return 0;\n}\n```\n\n#### 利用指定字符分割字符串\n\n```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n \nusing namespace std;\n \nint main() {\n        std::string data = \"1_2_3_4_5_6\";\n        std::stringstream ss(data);\n        std::string item;\n        queue<string> q;\n        cout << data << endl;\n        while (std::getline(ss, item, '_')) \n            cout << item << ' ';  \n}\n\n//1_2_3_4_5_6\n//1 2 3 4 5 6 \n```\n\n### String分割函数模板(正则表达式较慢)\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <regex>\n/* \n   用delim指定的正则表达式将字符串in分割，返回分割后的字符串数组\n   delim 分割字符串的正则表达式 \n */\nstd::vector<std::string> s_split(const std::string& in, const std::string& delim) {\n    std::regex re{ delim };\n    // 调用 std::vector::vector (InputIterator first, InputIterator last,const allocator_type& alloc = allocator_type())\n    // 构造函数,完成字符串分割\n    return std::vector<std::string> {\n        std::sregex_token_iterator(in.begin(), in.end(), re, -1),\n        std::sregex_token_iterator()\n    };\n}\n```\n\n调用示例：\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <regex>\nint main() {    \n    auto s_result = s_split(\"hello,do you ;know the word?\", \"[\\\\s,;?]+\"); // \\s代表空格制表符换行等任意空白字符\n    std::copy(s_result.begin(), s_result.end(), std::ostream_iterator<std::string>(std::cout, \"\\n\"));\n\n    auto c_result = c_split(\"hello,do you ;know the word?\", \"[\\\\s,;?]+\");\n    std::copy(c_result.begin(), c_result.end(), std::ostream_iterator<std::string>(std::cout, \"\\n\"));\n\n    // 设置locale使std::wcout支持中文输出\n    std::wcout.imbue(std::locale(std::locale(), \"\", LC_CTYPE));\n\n    auto ws_result = ws_split(L\"lao ban 老板,来份 小龙虾,快点啊!?\", L\"[\\\\s,;?]+\");\n    std::copy(ws_result.begin(), ws_result.end(), std::ostream_iterator<std::wstring, std::wstring::value_type>(std::wcout, L\"\\n\"));\n}\n```\n\n### 前缀和STL函数\n\n```cpp\n#include<iostream>\n#include <vector>//vector\n#include <numeric>\n#include <time.h> //随机数\nusing namespace std;\n//自定义方法\nint func(int x, int y) { return x - y; }\nvoid main()\n{\n\t//定义容器\n\tvector<int>vec;\n\tsrand(time(0));//随机数\n\t//赋值\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tint num = rand() % 100;\n\t\tvec.push_back(num);\n\t}\n\t//迭代器\n\tvector<int>::iterator vi;\n\t//输出\n\tcout << \"vec : \\n\";\n\tfor (vi = vec.begin(); vi < vec.end(); vi++) { cout << *vi << '\\t'; } //输出\n\tcout << endl << endl;\n\n\t// 结果存放\n\t// 声明容器、数组，用于存放计算结果\n\tint arr[10] = { 0 };\n\tvector<int>vec2;\n\tvec2.resize(10);//设置容器的大小\n\n\n\t// 局部总和 第一个重载\n\t//partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)\n\tpartial_sum(vec.begin(), vec.end(), arr);\n\tcout << \"1 arr : \\n\"; \n\tfor (int i = 0; i < 10; i++) { cout << arr[i] << '\\t'; }//输出\n\tcout << endl << endl;\n\t\n\t//第二个重载\n\t// partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)\n\tpartial_sum(vec.begin(), vec.end(), arr, func);\n\tcout << \"2 arr : \\n\";\n\tfor (int i = 0; i < 10; i++) { cout << arr[i] << '\\t'; }//输出\n\tcout << endl << endl;\n\n\t//第三个重载\n\t//partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)\n\tpartial_sum(vec.begin(), vec.end(), vec2.begin());\n\tcout << \"3 vec2 : \\n\";\n\tfor (int i = 0; i < 10; i++) { cout << vec2[i] << '\\t'; }//输出\n\tcout << endl << endl;\n\n\t//第四个重载\n\t// partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)\n\tpartial_sum(vec.begin(), vec.end(), vec2.begin(), func);\n\tcout << \"4 vec2 : \\n\";\n\tfor (int i = 0; i < 10; i++) { cout << vec2[i] << '\\t'; }//输出\n\tcout << endl<< endl;\n\n\t// 结果存放在容器自身\n\tpartial_sum(vec.begin(), vec.end(), vec.begin());\n\tcout << \"5 vec : \\n\";\n\tfor (vi = vec.begin(); vi < vec.end(); vi++) { cout << *vi << '\\t'; }//输出\n}\n\n```\n\nSTL太慢，正常前缀和+差分数列解法：\n\n```cpp\n#include <cstdio>\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\nint main()\n{\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\n    for (int i = 1; i <= n; i ++ ) b[i] = a[i] - a[i - 1];       //b为a的差分数组\n    while (m -- )\n    {\n        int l, r, c; //[l,r]之间每个数加上c\n        scanf(\"%d%d%d\", &l, &r, &c);\n        b[l] += c, b[r + 1] -= c;                               //差分模板\n    }\n    for (int i = 1; i <= n; i ++ ) b[i] += b[i - 1];            //计算前缀和，（差分数列的前缀和就是原数列）\n    //此时的b数组就是前缀和数组了，即要输出的变化后的数组a\n    for (int i = 1; i <= n; i ++ ) printf(\"%d \", b[i]);\n    return 0;\n}\n```\n\n","source":"_posts/算法竞赛代码片段记录.md","raw":"---\ntitle: 算法竞赛代码片段记录\ndate: 2021-12-2 14:06:00\ntags: [CN,算法,知识整理]\ncategories: Algorithm\ntoc: true\nmathjax: false\n---\n\n# 代码片段记录\n\n## 代码加速相关\n\n### 加速输入\n\n```cpp\nint getin()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=x*10+ch-48,ch=getchar();\n\treturn x;\n}\n```\n\n### 高级输入输出\n\n```cpp\n#include<bits/stdc++.h>\n#define lson (o<<1)\n#define rson (o<<1|1)\n#define fi first\n#define sc second\n#define dbg(x) cout<<#x<<\" = \"<<(x)<<endl;\ntypedef long long ll;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\nusing namespace std;\nconst double pi=acos(-1);\nconst double eps=1e-6;\ninline int lowbit(int x){return x&(-x);}\ninline int read(){\n\tint f=1,x=0;char ch;\n\tdo{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\n\tdo{x=x*10+ch-'0';ch=getchar();}while(ch>='0'&&ch<='9');\n\treturn f*x;\n}\ntemplate<typename T> inline T max(T x,T y,T z){return max(max(x,y),z);}\ntemplate<typename T> inline T min(T x,T y,T z){return min(min(x,y),z);}\ntemplate<typename T> inline T sqr(T x){return x*x;}\ntemplate<typename T> inline void checkmax(T &x,T y){x=max(x,y);}\ntemplate<typename T> inline void checkmin(T &x,T y){x=min(x,y);}\ntemplate<typename T> inline void read(T &x){\nx=0;T f=1;char ch;do{ch=getchar();if(ch=='-')f=-1;}while(ch<'0'||ch>'9');\ndo x=x*10+ch-'0',ch=getchar();while(ch<='9'&&ch>='0');x*=f;\n}\ntemplate<typename A,typename B,typename C> inline A fpow(A x,B p,C yql){\n\tA ans=1;\n\tfor(;p;p>>=1,x=1LL*x*x%yql)if(p&1)ans=1LL*x*ans%yql;\n\treturn ans;\n}\nstruct FastIO{\n\tstatic const int S=1310720;\n\tint wpos;char wbuf[S];\n\tFastIO():wpos(0) {}\n\tinline int xchar(){\n\t\tstatic char buf[S];\n\t\tstatic int len=0,pos=0;\n\t\tif(pos==len)pos=0,len=fread(buf,1,S,stdin);\n\t\tif(pos==len)return -1;\n\t\treturn buf[pos++];\n\t}\n\tinline int read(){\n\t\tint c=xchar(),x=0;\n\t\twhile(c<=32&&~c)c=xchar();\n\t\tif(c==-1)return -1;\n\t\tfor(;'0'<=c&&c<='9';c=xchar())x=x*10+c-'0';\n\t\treturn x;\n\t}\n}io;\n//#define read io.read\n```\n\n## STL拓展\n\n### StringStream分割字符串(首选，速度最快)\n\n#### 默认分割空格、tab、回车换行\n\n```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n \nusing namespace std;\n \nint main() {\n    string str = \"hello world sperated by   spaces\\tand\\nhuiche\";\n \n    vector<string> arr;\n    istringstream ss(str);\n    string word;\n    while(ss>>word) {\n        arr.push_back(word);\n    }\n \n    for(size_t i=0; i<arr.size(); i++) {\n        cout << arr[i] << endl;\n    }\n     \n    return 0;\n}\n```\n\n#### 利用指定字符分割字符串\n\n```cpp\n#include <iostream>\n#include <sstream>\n#include <vector>\n \nusing namespace std;\n \nint main() {\n        std::string data = \"1_2_3_4_5_6\";\n        std::stringstream ss(data);\n        std::string item;\n        queue<string> q;\n        cout << data << endl;\n        while (std::getline(ss, item, '_')) \n            cout << item << ' ';  \n}\n\n//1_2_3_4_5_6\n//1 2 3 4 5 6 \n```\n\n### String分割函数模板(正则表达式较慢)\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <regex>\n/* \n   用delim指定的正则表达式将字符串in分割，返回分割后的字符串数组\n   delim 分割字符串的正则表达式 \n */\nstd::vector<std::string> s_split(const std::string& in, const std::string& delim) {\n    std::regex re{ delim };\n    // 调用 std::vector::vector (InputIterator first, InputIterator last,const allocator_type& alloc = allocator_type())\n    // 构造函数,完成字符串分割\n    return std::vector<std::string> {\n        std::sregex_token_iterator(in.begin(), in.end(), re, -1),\n        std::sregex_token_iterator()\n    };\n}\n```\n\n调用示例：\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <iterator>\n#include <regex>\nint main() {    \n    auto s_result = s_split(\"hello,do you ;know the word?\", \"[\\\\s,;?]+\"); // \\s代表空格制表符换行等任意空白字符\n    std::copy(s_result.begin(), s_result.end(), std::ostream_iterator<std::string>(std::cout, \"\\n\"));\n\n    auto c_result = c_split(\"hello,do you ;know the word?\", \"[\\\\s,;?]+\");\n    std::copy(c_result.begin(), c_result.end(), std::ostream_iterator<std::string>(std::cout, \"\\n\"));\n\n    // 设置locale使std::wcout支持中文输出\n    std::wcout.imbue(std::locale(std::locale(), \"\", LC_CTYPE));\n\n    auto ws_result = ws_split(L\"lao ban 老板,来份 小龙虾,快点啊!?\", L\"[\\\\s,;?]+\");\n    std::copy(ws_result.begin(), ws_result.end(), std::ostream_iterator<std::wstring, std::wstring::value_type>(std::wcout, L\"\\n\"));\n}\n```\n\n### 前缀和STL函数\n\n```cpp\n#include<iostream>\n#include <vector>//vector\n#include <numeric>\n#include <time.h> //随机数\nusing namespace std;\n//自定义方法\nint func(int x, int y) { return x - y; }\nvoid main()\n{\n\t//定义容器\n\tvector<int>vec;\n\tsrand(time(0));//随机数\n\t//赋值\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tint num = rand() % 100;\n\t\tvec.push_back(num);\n\t}\n\t//迭代器\n\tvector<int>::iterator vi;\n\t//输出\n\tcout << \"vec : \\n\";\n\tfor (vi = vec.begin(); vi < vec.end(); vi++) { cout << *vi << '\\t'; } //输出\n\tcout << endl << endl;\n\n\t// 结果存放\n\t// 声明容器、数组，用于存放计算结果\n\tint arr[10] = { 0 };\n\tvector<int>vec2;\n\tvec2.resize(10);//设置容器的大小\n\n\n\t// 局部总和 第一个重载\n\t//partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)\n\tpartial_sum(vec.begin(), vec.end(), arr);\n\tcout << \"1 arr : \\n\"; \n\tfor (int i = 0; i < 10; i++) { cout << arr[i] << '\\t'; }//输出\n\tcout << endl << endl;\n\t\n\t//第二个重载\n\t// partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)\n\tpartial_sum(vec.begin(), vec.end(), arr, func);\n\tcout << \"2 arr : \\n\";\n\tfor (int i = 0; i < 10; i++) { cout << arr[i] << '\\t'; }//输出\n\tcout << endl << endl;\n\n\t//第三个重载\n\t//partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)\n\tpartial_sum(vec.begin(), vec.end(), vec2.begin());\n\tcout << \"3 vec2 : \\n\";\n\tfor (int i = 0; i < 10; i++) { cout << vec2[i] << '\\t'; }//输出\n\tcout << endl << endl;\n\n\t//第四个重载\n\t// partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)\n\tpartial_sum(vec.begin(), vec.end(), vec2.begin(), func);\n\tcout << \"4 vec2 : \\n\";\n\tfor (int i = 0; i < 10; i++) { cout << vec2[i] << '\\t'; }//输出\n\tcout << endl<< endl;\n\n\t// 结果存放在容器自身\n\tpartial_sum(vec.begin(), vec.end(), vec.begin());\n\tcout << \"5 vec : \\n\";\n\tfor (vi = vec.begin(); vi < vec.end(); vi++) { cout << *vi << '\\t'; }//输出\n}\n\n```\n\nSTL太慢，正常前缀和+差分数列解法：\n\n```cpp\n#include <cstdio>\nusing namespace std;\nconst int N = 100010;\nint a[N], b[N];\nint main()\n{\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i ++ ) scanf(\"%d\", &a[i]);\n    for (int i = 1; i <= n; i ++ ) b[i] = a[i] - a[i - 1];       //b为a的差分数组\n    while (m -- )\n    {\n        int l, r, c; //[l,r]之间每个数加上c\n        scanf(\"%d%d%d\", &l, &r, &c);\n        b[l] += c, b[r + 1] -= c;                               //差分模板\n    }\n    for (int i = 1; i <= n; i ++ ) b[i] += b[i - 1];            //计算前缀和，（差分数列的前缀和就是原数列）\n    //此时的b数组就是前缀和数组了，即要输出的变化后的数组a\n    for (int i = 1; i <= n; i ++ ) printf(\"%d \", b[i]);\n    return 0;\n}\n```\n\n","slug":"算法竞赛代码片段记录","published":1,"updated":"2022-03-15T11:03:26.000Z","_id":"cl0s106c000085oo4bbzofxeu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"代码片段记录\"><a href=\"#代码片段记录\" class=\"headerlink\" title=\"代码片段记录\"></a>代码片段记录</h1><h2 id=\"代码加速相关\"><a href=\"#代码加速相关\" class=\"headerlink\" title=\"代码加速相关\"></a>代码加速相关</h2><h3 id=\"加速输入\"><a href=\"#加速输入\" class=\"headerlink\" title=\"加速输入\"></a>加速输入</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>;<span class=\"type\">char</span> ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>,ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高级输入输出\"><a href=\"#高级输入输出\" class=\"headerlink\" title=\"高级输入输出\"></a>高级输入输出</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lson (o&lt;&lt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rson (o&lt;&lt;1|1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> sc second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbg(x) cout&lt;&lt;#x&lt;&lt;<span class=\"string\">&quot; = &quot;</span>&lt;&lt;(x)&lt;&lt;endl;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> uint;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x&amp;(-x);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> f=<span class=\"number\">1</span>,x=<span class=\"number\">0</span>;<span class=\"type\">char</span> ch;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span>&#123;ch=<span class=\"built_in\">getchar</span>();<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>)f=<span class=\"number\">-1</span>;&#125;<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">do</span>&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f*x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> T <span class=\"title\">max</span><span class=\"params\">(T x,T y,T z)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(x,y),z);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> T <span class=\"title\">min</span><span class=\"params\">(T x,T y,T z)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(<span class=\"built_in\">min</span>(x,y),z);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> T <span class=\"title\">sqr</span><span class=\"params\">(T x)</span></span>&#123;<span class=\"keyword\">return</span> x*x;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">checkmax</span><span class=\"params\">(T &amp;x,T y)</span></span>&#123;x=<span class=\"built_in\">max</span>(x,y);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">checkmin</span><span class=\"params\">(T &amp;x,T y)</span></span>&#123;x=<span class=\"built_in\">min</span>(x,y);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(T &amp;x)</span></span>&#123;</span><br><span class=\"line\">x=<span class=\"number\">0</span>;T f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;<span class=\"keyword\">do</span>&#123;ch=<span class=\"built_in\">getchar</span>();<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>)f=<span class=\"number\">-1</span>;&#125;<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">do</span> x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>,ch=<span class=\"built_in\">getchar</span>();<span class=\"keyword\">while</span>(ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>);x*=f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> A,<span class=\"keyword\">typename</span> B,<span class=\"keyword\">typename</span> C&gt; <span class=\"keyword\">inline</span> A <span class=\"title\">fpow</span><span class=\"params\">(A x,B p,C yql)</span></span>&#123;</span><br><span class=\"line\">\tA ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;p;p&gt;&gt;=<span class=\"number\">1</span>,x=<span class=\"number\">1LL</span>*x*x%yql)<span class=\"keyword\">if</span>(p&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1LL</span>*x*ans%yql;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FastIO</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> S=<span class=\"number\">1310720</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> wpos;<span class=\"type\">char</span> wbuf[S];</span><br><span class=\"line\">\t<span class=\"built_in\">FastIO</span>():<span class=\"built_in\">wpos</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">xchar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> <span class=\"type\">char</span> buf[S];</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> <span class=\"type\">int</span> len=<span class=\"number\">0</span>,pos=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pos==len)pos=<span class=\"number\">0</span>,len=<span class=\"built_in\">fread</span>(buf,<span class=\"number\">1</span>,S,stdin);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pos==len)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> buf[pos++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c=<span class=\"built_in\">xchar</span>(),x=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"number\">32</span>&amp;&amp;~c)c=<span class=\"built_in\">xchar</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(c==<span class=\"number\">-1</span>)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;<span class=\"string\">&#x27;0&#x27;</span>&lt;=c&amp;&amp;c&lt;=<span class=\"string\">&#x27;9&#x27;</span>;c=<span class=\"built_in\">xchar</span>())x=x*<span class=\"number\">10</span>+c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;io;</span><br><span class=\"line\"><span class=\"comment\">//#define read io.read</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"STL拓展\"><a href=\"#STL拓展\" class=\"headerlink\" title=\"STL拓展\"></a>STL拓展</h2><h3 id=\"StringStream分割字符串-首选，速度最快\"><a href=\"#StringStream分割字符串-首选，速度最快\" class=\"headerlink\" title=\"StringStream分割字符串(首选，速度最快)\"></a>StringStream分割字符串(首选，速度最快)</h3><h4 id=\"默认分割空格、tab、回车换行\"><a href=\"#默认分割空格、tab、回车换行\" class=\"headerlink\" title=\"默认分割空格、tab、回车换行\"></a>默认分割空格、tab、回车换行</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string str = <span class=\"string\">&quot;hello world sperated by   spaces\\tand\\nhuiche&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    vector&lt;string&gt; arr;</span><br><span class=\"line\">    <span class=\"function\">istringstream <span class=\"title\">ss</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">    string word;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss&gt;&gt;word) &#123;</span><br><span class=\"line\">        arr.<span class=\"built_in\">push_back</span>(word);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i=<span class=\"number\">0</span>; i&lt;arr.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"利用指定字符分割字符串\"><a href=\"#利用指定字符分割字符串\" class=\"headerlink\" title=\"利用指定字符分割字符串\"></a>利用指定字符分割字符串</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::string data = <span class=\"string\">&quot;1_2_3_4_5_6&quot;</span>;</span><br><span class=\"line\">        <span class=\"function\">std::stringstream <span class=\"title\">ss</span><span class=\"params\">(data)</span></span>;</span><br><span class=\"line\">        std::string item;</span><br><span class=\"line\">        queue&lt;string&gt; q;</span><br><span class=\"line\">        cout &lt;&lt; data &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (std::<span class=\"built_in\">getline</span>(ss, item, <span class=\"string\">&#x27;_&#x27;</span>)) </span><br><span class=\"line\">            cout &lt;&lt; item &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1_2_3_4_5_6</span></span><br><span class=\"line\"><span class=\"comment\">//1 2 3 4 5 6 </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"String分割函数模板-正则表达式较慢\"><a href=\"#String分割函数模板-正则表达式较慢\" class=\"headerlink\" title=\"String分割函数模板(正则表达式较慢)\"></a>String分割函数模板(正则表达式较慢)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;regex&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">   用delim指定的正则表达式将字符串in分割，返回分割后的字符串数组</span></span><br><span class=\"line\"><span class=\"comment\">   delim 分割字符串的正则表达式 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;std::string&gt; <span class=\"title\">s_split</span><span class=\"params\">(<span class=\"type\">const</span> std::string&amp; in, <span class=\"type\">const</span> std::string&amp; delim)</span> </span>&#123;</span><br><span class=\"line\">    std::regex re&#123; delim &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 std::vector::vector (InputIterator first, InputIterator last,const allocator_type&amp; alloc = allocator_type())</span></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数,完成字符串分割</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::vector&lt;std::string&gt; &#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">sregex_token_iterator</span>(in.<span class=\"built_in\">begin</span>(), in.<span class=\"built_in\">end</span>(), re, <span class=\"number\">-1</span>),</span><br><span class=\"line\">        std::<span class=\"built_in\">sregex_token_iterator</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;regex&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> s_result = <span class=\"built_in\">s_split</span>(<span class=\"string\">&quot;hello,do you ;know the word?&quot;</span>, <span class=\"string\">&quot;[\\\\s,;?]+&quot;</span>); <span class=\"comment\">// \\s代表空格制表符换行等任意空白字符</span></span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(s_result.<span class=\"built_in\">begin</span>(), s_result.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">ostream_iterator</span>&lt;std::string&gt;(std::cout, <span class=\"string\">&quot;\\n&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> c_result = <span class=\"built_in\">c_split</span>(<span class=\"string\">&quot;hello,do you ;know the word?&quot;</span>, <span class=\"string\">&quot;[\\\\s,;?]+&quot;</span>);</span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(c_result.<span class=\"built_in\">begin</span>(), c_result.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">ostream_iterator</span>&lt;std::string&gt;(std::cout, <span class=\"string\">&quot;\\n&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置locale使std::wcout支持中文输出</span></span><br><span class=\"line\">    std::wcout.<span class=\"built_in\">imbue</span>(std::<span class=\"built_in\">locale</span>(std::<span class=\"built_in\">locale</span>(), <span class=\"string\">&quot;&quot;</span>, LC_CTYPE));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ws_result = <span class=\"built_in\">ws_split</span>(<span class=\"string\">L&quot;lao ban 老板,来份 小龙虾,快点啊!?&quot;</span>, <span class=\"string\">L&quot;[\\\\s,;?]+&quot;</span>);</span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(ws_result.<span class=\"built_in\">begin</span>(), ws_result.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">ostream_iterator</span>&lt;std::wstring, std::wstring::value_type&gt;(std::wcout, <span class=\"string\">L&quot;\\n&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前缀和STL函数\"><a href=\"#前缀和STL函数\" class=\"headerlink\" title=\"前缀和STL函数\"></a>前缀和STL函数</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span><span class=\"comment\">//vector</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span> <span class=\"comment\">//随机数</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">//自定义方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123; <span class=\"keyword\">return</span> x - y; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义容器</span></span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;vec;</span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"number\">0</span>));<span class=\"comment\">//随机数</span></span><br><span class=\"line\">\t<span class=\"comment\">//赋值</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> num = <span class=\"built_in\">rand</span>() % <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\tvec.<span class=\"built_in\">push_back</span>(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//迭代器</span></span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator vi;</span><br><span class=\"line\">\t<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;vec : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (vi = vec.<span class=\"built_in\">begin</span>(); vi &lt; vec.<span class=\"built_in\">end</span>(); vi++) &#123; cout &lt;&lt; *vi &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125; <span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 结果存放</span></span><br><span class=\"line\">\t<span class=\"comment\">// 声明容器、数组，用于存放计算结果</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;vec2;</span><br><span class=\"line\">\tvec2.<span class=\"built_in\">resize</span>(<span class=\"number\">10</span>);<span class=\"comment\">//设置容器的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 局部总和 第一个重载</span></span><br><span class=\"line\">\t<span class=\"comment\">//partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), arr);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;1 arr : \\n&quot;</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//第二个重载</span></span><br><span class=\"line\">\t<span class=\"comment\">// partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), arr, func);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;2 arr : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三个重载</span></span><br><span class=\"line\">\t<span class=\"comment\">//partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec2.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;3 vec2 : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; cout &lt;&lt; vec2[i] &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第四个重载</span></span><br><span class=\"line\">\t<span class=\"comment\">// partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec2.<span class=\"built_in\">begin</span>(), func);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;4 vec2 : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; cout &lt;&lt; vec2[i] &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 结果存放在容器自身</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;5 vec : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (vi = vec.<span class=\"built_in\">begin</span>(); vi &lt; vec.<span class=\"built_in\">end</span>(); vi++) &#123; cout &lt;&lt; *vi &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>STL太慢，正常前缀和+差分数列解法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N], b[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) b[i] = a[i] - a[i - <span class=\"number\">1</span>];       <span class=\"comment\">//b为a的差分数组</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r, c; <span class=\"comment\">//[l,r]之间每个数加上c</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class=\"line\">        b[l] += c, b[r + <span class=\"number\">1</span>] -= c;                               <span class=\"comment\">//差分模板</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) b[i] += b[i - <span class=\"number\">1</span>];            <span class=\"comment\">//计算前缀和，（差分数列的前缀和就是原数列）</span></span><br><span class=\"line\">    <span class=\"comment\">//此时的b数组就是前缀和数组了，即要输出的变化后的数组a</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, b[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"excerpt":"","more":"<h1 id=\"代码片段记录\"><a href=\"#代码片段记录\" class=\"headerlink\" title=\"代码片段记录\"></a>代码片段记录</h1><h2 id=\"代码加速相关\"><a href=\"#代码加速相关\" class=\"headerlink\" title=\"代码加速相关\"></a>代码加速相关</h2><h3 id=\"加速输入\"><a href=\"#加速输入\" class=\"headerlink\" title=\"加速输入\"></a>加速输入</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getin</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> x=<span class=\"number\">0</span>;<span class=\"type\">char</span> ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>)ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>)x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>,ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"高级输入输出\"><a href=\"#高级输入输出\" class=\"headerlink\" title=\"高级输入输出\"></a>高级输入输出</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> lson (o&lt;&lt;1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> rson (o&lt;&lt;1|1)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> sc second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> dbg(x) cout&lt;&lt;#x&lt;&lt;<span class=\"string\">&quot; = &quot;</span>&lt;&lt;(x)&lt;&lt;endl;</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span> uint;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x&amp;(-x);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> f=<span class=\"number\">1</span>,x=<span class=\"number\">0</span>;<span class=\"type\">char</span> ch;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span>&#123;ch=<span class=\"built_in\">getchar</span>();<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>)f=<span class=\"number\">-1</span>;&#125;<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">do</span>&#123;x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>;ch=<span class=\"built_in\">getchar</span>();&#125;<span class=\"keyword\">while</span>(ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f*x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> T <span class=\"title\">max</span><span class=\"params\">(T x,T y,T z)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(x,y),z);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> T <span class=\"title\">min</span><span class=\"params\">(T x,T y,T z)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(<span class=\"built_in\">min</span>(x,y),z);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> T <span class=\"title\">sqr</span><span class=\"params\">(T x)</span></span>&#123;<span class=\"keyword\">return</span> x*x;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">checkmax</span><span class=\"params\">(T &amp;x,T y)</span></span>&#123;x=<span class=\"built_in\">max</span>(x,y);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">checkmin</span><span class=\"params\">(T &amp;x,T y)</span></span>&#123;x=<span class=\"built_in\">min</span>(x,y);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(T &amp;x)</span></span>&#123;</span><br><span class=\"line\">x=<span class=\"number\">0</span>;T f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch;<span class=\"keyword\">do</span>&#123;ch=<span class=\"built_in\">getchar</span>();<span class=\"keyword\">if</span>(ch==<span class=\"string\">&#x27;-&#x27;</span>)f=<span class=\"number\">-1</span>;&#125;<span class=\"keyword\">while</span>(ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">do</span> x=x*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>,ch=<span class=\"built_in\">getchar</span>();<span class=\"keyword\">while</span>(ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>);x*=f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> A,<span class=\"keyword\">typename</span> B,<span class=\"keyword\">typename</span> C&gt; <span class=\"keyword\">inline</span> A <span class=\"title\">fpow</span><span class=\"params\">(A x,B p,C yql)</span></span>&#123;</span><br><span class=\"line\">\tA ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(;p;p&gt;&gt;=<span class=\"number\">1</span>,x=<span class=\"number\">1LL</span>*x*x%yql)<span class=\"keyword\">if</span>(p&amp;<span class=\"number\">1</span>)ans=<span class=\"number\">1LL</span>*x*ans%yql;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">FastIO</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">int</span> S=<span class=\"number\">1310720</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> wpos;<span class=\"type\">char</span> wbuf[S];</span><br><span class=\"line\">\t<span class=\"built_in\">FastIO</span>():<span class=\"built_in\">wpos</span>(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">xchar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> <span class=\"type\">char</span> buf[S];</span><br><span class=\"line\">\t\t<span class=\"type\">static</span> <span class=\"type\">int</span> len=<span class=\"number\">0</span>,pos=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pos==len)pos=<span class=\"number\">0</span>,len=<span class=\"built_in\">fread</span>(buf,<span class=\"number\">1</span>,S,stdin);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pos==len)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> buf[pos++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> c=<span class=\"built_in\">xchar</span>(),x=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(c&lt;=<span class=\"number\">32</span>&amp;&amp;~c)c=<span class=\"built_in\">xchar</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(c==<span class=\"number\">-1</span>)<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(;<span class=\"string\">&#x27;0&#x27;</span>&lt;=c&amp;&amp;c&lt;=<span class=\"string\">&#x27;9&#x27;</span>;c=<span class=\"built_in\">xchar</span>())x=x*<span class=\"number\">10</span>+c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;io;</span><br><span class=\"line\"><span class=\"comment\">//#define read io.read</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"STL拓展\"><a href=\"#STL拓展\" class=\"headerlink\" title=\"STL拓展\"></a>STL拓展</h2><h3 id=\"StringStream分割字符串-首选，速度最快\"><a href=\"#StringStream分割字符串-首选，速度最快\" class=\"headerlink\" title=\"StringStream分割字符串(首选，速度最快)\"></a>StringStream分割字符串(首选，速度最快)</h3><h4 id=\"默认分割空格、tab、回车换行\"><a href=\"#默认分割空格、tab、回车换行\" class=\"headerlink\" title=\"默认分割空格、tab、回车换行\"></a>默认分割空格、tab、回车换行</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string str = <span class=\"string\">&quot;hello world sperated by   spaces\\tand\\nhuiche&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    vector&lt;string&gt; arr;</span><br><span class=\"line\">    <span class=\"function\">istringstream <span class=\"title\">ss</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">    string word;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss&gt;&gt;word) &#123;</span><br><span class=\"line\">        arr.<span class=\"built_in\">push_back</span>(word);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">size_t</span> i=<span class=\"number\">0</span>; i&lt;arr.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"利用指定字符分割字符串\"><a href=\"#利用指定字符分割字符串\" class=\"headerlink\" title=\"利用指定字符分割字符串\"></a>利用指定字符分割字符串</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        std::string data = <span class=\"string\">&quot;1_2_3_4_5_6&quot;</span>;</span><br><span class=\"line\">        <span class=\"function\">std::stringstream <span class=\"title\">ss</span><span class=\"params\">(data)</span></span>;</span><br><span class=\"line\">        std::string item;</span><br><span class=\"line\">        queue&lt;string&gt; q;</span><br><span class=\"line\">        cout &lt;&lt; data &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (std::<span class=\"built_in\">getline</span>(ss, item, <span class=\"string\">&#x27;_&#x27;</span>)) </span><br><span class=\"line\">            cout &lt;&lt; item &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1_2_3_4_5_6</span></span><br><span class=\"line\"><span class=\"comment\">//1 2 3 4 5 6 </span></span><br></pre></td></tr></table></figure>\n<h3 id=\"String分割函数模板-正则表达式较慢\"><a href=\"#String分割函数模板-正则表达式较慢\" class=\"headerlink\" title=\"String分割函数模板(正则表达式较慢)\"></a>String分割函数模板(正则表达式较慢)</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;regex&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">   用delim指定的正则表达式将字符串in分割，返回分割后的字符串数组</span></span><br><span class=\"line\"><span class=\"comment\">   delim 分割字符串的正则表达式 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">std::vector&lt;std::string&gt; <span class=\"title\">s_split</span><span class=\"params\">(<span class=\"type\">const</span> std::string&amp; in, <span class=\"type\">const</span> std::string&amp; delim)</span> </span>&#123;</span><br><span class=\"line\">    std::regex re&#123; delim &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 std::vector::vector (InputIterator first, InputIterator last,const allocator_type&amp; alloc = allocator_type())</span></span><br><span class=\"line\">    <span class=\"comment\">// 构造函数,完成字符串分割</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> std::vector&lt;std::string&gt; &#123;</span><br><span class=\"line\">        std::<span class=\"built_in\">sregex_token_iterator</span>(in.<span class=\"built_in\">begin</span>(), in.<span class=\"built_in\">end</span>(), re, <span class=\"number\">-1</span>),</span><br><span class=\"line\">        std::<span class=\"built_in\">sregex_token_iterator</span>()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用示例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iterator&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;regex&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;    </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> s_result = <span class=\"built_in\">s_split</span>(<span class=\"string\">&quot;hello,do you ;know the word?&quot;</span>, <span class=\"string\">&quot;[\\\\s,;?]+&quot;</span>); <span class=\"comment\">// \\s代表空格制表符换行等任意空白字符</span></span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(s_result.<span class=\"built_in\">begin</span>(), s_result.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">ostream_iterator</span>&lt;std::string&gt;(std::cout, <span class=\"string\">&quot;\\n&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> c_result = <span class=\"built_in\">c_split</span>(<span class=\"string\">&quot;hello,do you ;know the word?&quot;</span>, <span class=\"string\">&quot;[\\\\s,;?]+&quot;</span>);</span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(c_result.<span class=\"built_in\">begin</span>(), c_result.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">ostream_iterator</span>&lt;std::string&gt;(std::cout, <span class=\"string\">&quot;\\n&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置locale使std::wcout支持中文输出</span></span><br><span class=\"line\">    std::wcout.<span class=\"built_in\">imbue</span>(std::<span class=\"built_in\">locale</span>(std::<span class=\"built_in\">locale</span>(), <span class=\"string\">&quot;&quot;</span>, LC_CTYPE));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ws_result = <span class=\"built_in\">ws_split</span>(<span class=\"string\">L&quot;lao ban 老板,来份 小龙虾,快点啊!?&quot;</span>, <span class=\"string\">L&quot;[\\\\s,;?]+&quot;</span>);</span><br><span class=\"line\">    std::<span class=\"built_in\">copy</span>(ws_result.<span class=\"built_in\">begin</span>(), ws_result.<span class=\"built_in\">end</span>(), std::<span class=\"built_in\">ostream_iterator</span>&lt;std::wstring, std::wstring::value_type&gt;(std::wcout, <span class=\"string\">L&quot;\\n&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前缀和STL函数\"><a href=\"#前缀和STL函数\" class=\"headerlink\" title=\"前缀和STL函数\"></a>前缀和STL函数</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;vector&gt;</span><span class=\"comment\">//vector</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;numeric&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span> <span class=\"comment\">//随机数</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">//自定义方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123; <span class=\"keyword\">return</span> x - y; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//定义容器</span></span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;vec;</span><br><span class=\"line\">\t<span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"number\">0</span>));<span class=\"comment\">//随机数</span></span><br><span class=\"line\">\t<span class=\"comment\">//赋值</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> num = <span class=\"built_in\">rand</span>() % <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\tvec.<span class=\"built_in\">push_back</span>(num);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//迭代器</span></span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;::iterator vi;</span><br><span class=\"line\">\t<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;vec : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (vi = vec.<span class=\"built_in\">begin</span>(); vi &lt; vec.<span class=\"built_in\">end</span>(); vi++) &#123; cout &lt;&lt; *vi &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125; <span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 结果存放</span></span><br><span class=\"line\">\t<span class=\"comment\">// 声明容器、数组，用于存放计算结果</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\tvector&lt;<span class=\"type\">int</span>&gt;vec2;</span><br><span class=\"line\">\tvec2.<span class=\"built_in\">resize</span>(<span class=\"number\">10</span>);<span class=\"comment\">//设置容器的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 局部总和 第一个重载</span></span><br><span class=\"line\">\t<span class=\"comment\">//partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), arr);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;1 arr : \\n&quot;</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//第二个重载</span></span><br><span class=\"line\">\t<span class=\"comment\">// partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), arr, func);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;2 arr : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; cout &lt;&lt; arr[i] &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第三个重载</span></span><br><span class=\"line\">\t<span class=\"comment\">//partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置)</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec2.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;3 vec2 : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; cout &lt;&lt; vec2[i] &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第四个重载</span></span><br><span class=\"line\">\t<span class=\"comment\">// partial_sum(容器要计算的起始位置，容器要计算的结束位置，结果存放的起始位置，自定义函数)</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec2.<span class=\"built_in\">begin</span>(), func);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;4 vec2 : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123; cout &lt;&lt; vec2[i] &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">\tcout &lt;&lt; endl&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 结果存放在容器自身</span></span><br><span class=\"line\">\t<span class=\"built_in\">partial_sum</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>(), vec.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;5 vec : \\n&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (vi = vec.<span class=\"built_in\">begin</span>(); vi &lt; vec.<span class=\"built_in\">end</span>(); vi++) &#123; cout &lt;&lt; *vi &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>; &#125;<span class=\"comment\">//输出</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>STL太慢，正常前缀和+差分数列解法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> a[N], b[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) b[i] = a[i] - a[i - <span class=\"number\">1</span>];       <span class=\"comment\">//b为a的差分数组</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r, c; <span class=\"comment\">//[l,r]之间每个数加上c</span></span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;c);</span><br><span class=\"line\">        b[l] += c, b[r + <span class=\"number\">1</span>] -= c;                               <span class=\"comment\">//差分模板</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) b[i] += b[i - <span class=\"number\">1</span>];            <span class=\"comment\">//计算前缀和，（差分数列的前缀和就是原数列）</span></span><br><span class=\"line\">    <span class=\"comment\">//此时的b数组就是前缀和数组了，即要输出的变化后的数组a</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++ ) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, b[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"编译原理LL(1)文法总结","date":"2021-12-21T21:03:32.000Z","toc":true,"mathjax":true,"_content":"\n# 编译原理-LL(1)文法总结\n\n---\n\n## 1 First集求法总结\n\n两种情况：\n\n1. **A->aB**：以终结符开头，直接把这个终结符放到A的First里\n\n2. **A->CD**：以非终结符开头， 先把C的First放到A的First里(要谨记ε的情况)\n\n   再看如果C的First中有ε的话就把D的First放到A的First里，如果D也有ε的话往后依次类推，直到ε本身就在first（A）中\n\n---\n\n## 2 Follow集求法总结\n\n先在候选式（右边）中找到该非终结符，如L（注意例中只有一个定义，但找Follow要看到所有右边出现该非终结符的）\n\n算法：\n\n- 对于文法G[S]，首先将右端结束标记 `$` 放到 FOLLOW(S) 中\n\n- 按照下面两个规则**不断迭代**，直到所有的FOLLOW集合都不再增长为止\n  - 如果存在产生式`A -> αBβ` ，那么 FIRST(β)中所有非ε的符号都在FOLLOW(B)中；\n  - 如果存在产生式`A -> αB`，或者`A -> αBβ` 且FIRST(β)包含ε，那么FOLLOW(A)中的所有符号都加入到FOLLOW(B)中\n","source":"_posts/编译原理-LL1文法总结.md","raw":"---\ntitle: 编译原理LL(1)文法总结\ndate: 2021-12-21 13:03:32\ntags: [CN,编译原理,知识整理]\ncategories: Compiler\ntoc: true\nmathjax: true\n---\n\n# 编译原理-LL(1)文法总结\n\n---\n\n## 1 First集求法总结\n\n两种情况：\n\n1. **A->aB**：以终结符开头，直接把这个终结符放到A的First里\n\n2. **A->CD**：以非终结符开头， 先把C的First放到A的First里(要谨记ε的情况)\n\n   再看如果C的First中有ε的话就把D的First放到A的First里，如果D也有ε的话往后依次类推，直到ε本身就在first（A）中\n\n---\n\n## 2 Follow集求法总结\n\n先在候选式（右边）中找到该非终结符，如L（注意例中只有一个定义，但找Follow要看到所有右边出现该非终结符的）\n\n算法：\n\n- 对于文法G[S]，首先将右端结束标记 `$` 放到 FOLLOW(S) 中\n\n- 按照下面两个规则**不断迭代**，直到所有的FOLLOW集合都不再增长为止\n  - 如果存在产生式`A -> αBβ` ，那么 FIRST(β)中所有非ε的符号都在FOLLOW(B)中；\n  - 如果存在产生式`A -> αB`，或者`A -> αBβ` 且FIRST(β)包含ε，那么FOLLOW(A)中的所有符号都加入到FOLLOW(B)中\n","slug":"编译原理-LL1文法总结","published":1,"updated":"2022-03-15T11:03:26.000Z","_id":"cl0s106c6000n5oo4h7jq4jek","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"编译原理-LL-1-文法总结\"><a href=\"#编译原理-LL-1-文法总结\" class=\"headerlink\" title=\"编译原理-LL(1)文法总结\"></a>编译原理-LL(1)文法总结</h1><hr>\n<h2 id=\"1-First集求法总结\"><a href=\"#1-First集求法总结\" class=\"headerlink\" title=\"1 First集求法总结\"></a>1 First集求法总结</h2><p>两种情况：</p>\n<ol>\n<li><p><strong>A-&gt;aB</strong>：以终结符开头，直接把这个终结符放到A的First里</p>\n</li>\n<li><p><strong>A-&gt;CD</strong>：以非终结符开头， 先把C的First放到A的First里(要谨记ε的情况)</p>\n<p>再看如果C的First中有ε的话就把D的First放到A的First里，如果D也有ε的话往后依次类推，直到ε本身就在first（A）中</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"2-Follow集求法总结\"><a href=\"#2-Follow集求法总结\" class=\"headerlink\" title=\"2 Follow集求法总结\"></a>2 Follow集求法总结</h2><p>先在候选式（右边）中找到该非终结符，如L（注意例中只有一个定义，但找Follow要看到所有右边出现该非终结符的）</p>\n<p>算法：</p>\n<ul>\n<li><p>对于文法G[S]，首先将右端结束标记 <code>$</code> 放到 FOLLOW(S) 中</p>\n</li>\n<li><p>按照下面两个规则<strong>不断迭代</strong>，直到所有的FOLLOW集合都不再增长为止</p>\n<ul>\n<li>如果存在产生式<code>A -&gt; αBβ</code> ，那么 FIRST(β)中所有非ε的符号都在FOLLOW(B)中；</li>\n<li>如果存在产生式<code>A -&gt; αB</code>，或者<code>A -&gt; αBβ</code> 且FIRST(β)包含ε，那么FOLLOW(A)中的所有符号都加入到FOLLOW(B)中</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"excerpt":"","more":"<h1 id=\"编译原理-LL-1-文法总结\"><a href=\"#编译原理-LL-1-文法总结\" class=\"headerlink\" title=\"编译原理-LL(1)文法总结\"></a>编译原理-LL(1)文法总结</h1><hr>\n<h2 id=\"1-First集求法总结\"><a href=\"#1-First集求法总结\" class=\"headerlink\" title=\"1 First集求法总结\"></a>1 First集求法总结</h2><p>两种情况：</p>\n<ol>\n<li><p><strong>A-&gt;aB</strong>：以终结符开头，直接把这个终结符放到A的First里</p>\n</li>\n<li><p><strong>A-&gt;CD</strong>：以非终结符开头， 先把C的First放到A的First里(要谨记ε的情况)</p>\n<p>再看如果C的First中有ε的话就把D的First放到A的First里，如果D也有ε的话往后依次类推，直到ε本身就在first（A）中</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"2-Follow集求法总结\"><a href=\"#2-Follow集求法总结\" class=\"headerlink\" title=\"2 Follow集求法总结\"></a>2 Follow集求法总结</h2><p>先在候选式（右边）中找到该非终结符，如L（注意例中只有一个定义，但找Follow要看到所有右边出现该非终结符的）</p>\n<p>算法：</p>\n<ul>\n<li><p>对于文法G[S]，首先将右端结束标记 <code>$</code> 放到 FOLLOW(S) 中</p>\n</li>\n<li><p>按照下面两个规则<strong>不断迭代</strong>，直到所有的FOLLOW集合都不再增长为止</p>\n<ul>\n<li>如果存在产生式<code>A -&gt; αBβ</code> ，那么 FIRST(β)中所有非ε的符号都在FOLLOW(B)中；</li>\n<li>如果存在产生式<code>A -&gt; αB</code>，或者<code>A -&gt; αBβ</code> 且FIRST(β)包含ε，那么FOLLOW(A)中的所有符号都加入到FOLLOW(B)中</li>\n</ul>\n</li>\n</ul>\n"},{"title":"TCP/IP五层协议整理","date":"2021-12-29T04:19:32.000Z","toc":true,"mathjax":false,"_content":"\n# TCP/IP五层协议整理\n\n---\n\n| 层次名称 | 协议举例                     | 协议分组名称             | 主要功能                                 |\n| -------- | ---------------------------- | ------------------------ | ---------------------------------------- |\n| 应用层   | HTTP/SMTP/FTP/DNS/RIP/BGP    | 报文                     | 直接为用户的应用进程提供服务             |\n| 运输层   | TCP/UDP                      | 报文段(TCP), 数据报(UDP) | 两个主机中进程间通信/复用和分用/差错检测 |\n| 网络层   | IP/ICMP/OSPF                 | 数据报                   | 两个主机间通信(转发)，路由选路功能(选路) |\n| 链路层   | 以太网/PPP/IEEE 802.1Q/802.3 | 帧                       | 物理链路上两个相邻节点通信/差错检测纠正  |\n| 物理层   | 10BASE-T/10BASE2/10BASE5     | 比特流                   | 透明地传送比特流                         |\n\n","source":"_posts/计算机网络-五层协议整理.md","raw":"---\ntitle: TCP/IP五层协议整理\ndate: 2021-12-28 20:19:32\ntags: [CN,计算机网络,知识整理]\ncategories: Computer Network\ntoc: true\nmathjax: false\n---\n\n# TCP/IP五层协议整理\n\n---\n\n| 层次名称 | 协议举例                     | 协议分组名称             | 主要功能                                 |\n| -------- | ---------------------------- | ------------------------ | ---------------------------------------- |\n| 应用层   | HTTP/SMTP/FTP/DNS/RIP/BGP    | 报文                     | 直接为用户的应用进程提供服务             |\n| 运输层   | TCP/UDP                      | 报文段(TCP), 数据报(UDP) | 两个主机中进程间通信/复用和分用/差错检测 |\n| 网络层   | IP/ICMP/OSPF                 | 数据报                   | 两个主机间通信(转发)，路由选路功能(选路) |\n| 链路层   | 以太网/PPP/IEEE 802.1Q/802.3 | 帧                       | 物理链路上两个相邻节点通信/差错检测纠正  |\n| 物理层   | 10BASE-T/10BASE2/10BASE5     | 比特流                   | 透明地传送比特流                         |\n\n","slug":"计算机网络-五层协议整理","published":1,"updated":"2022-03-15T11:03:26.000Z","_id":"cl0s106c6000o5oo49y2a1o6w","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"TCP-IP五层协议整理\"><a href=\"#TCP-IP五层协议整理\" class=\"headerlink\" title=\"TCP/IP五层协议整理\"></a>TCP/IP五层协议整理</h1><hr>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>层次名称</th>\n<th>协议举例</th>\n<th>协议分组名称</th>\n<th>主要功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>HTTP/SMTP/FTP/DNS/RIP/BGP</td>\n<td>报文</td>\n<td>直接为用户的应用进程提供服务</td>\n</tr>\n<tr>\n<td>运输层</td>\n<td>TCP/UDP</td>\n<td>报文段(TCP), 数据报(UDP)</td>\n<td>两个主机中进程间通信/复用和分用/差错检测</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP/ICMP/OSPF</td>\n<td>数据报</td>\n<td>两个主机间通信(转发)，路由选路功能(选路)</td>\n</tr>\n<tr>\n<td>链路层</td>\n<td>以太网/PPP/IEEE 802.1Q/802.3</td>\n<td>帧</td>\n<td>物理链路上两个相邻节点通信/差错检测纠正</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>10BASE-T/10BASE2/10BASE5</td>\n<td>比特流</td>\n<td>透明地传送比特流</td>\n</tr>\n</tbody>\n</table>\n</div>\n","site":{"data":{"link":[{"class_name":"Acknowledgement","class_desc":"These resources helped me build this blog","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Fast, simple and powerful weblog framework"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"Beautiful hexo theme"}]},{"class_name":"Sites","class_desc":"Recommended websites","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"Gain knowledge here"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"Eat Watermelon here"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"Twitter"}]}]}},"excerpt":"","more":"<h1 id=\"TCP-IP五层协议整理\"><a href=\"#TCP-IP五层协议整理\" class=\"headerlink\" title=\"TCP/IP五层协议整理\"></a>TCP/IP五层协议整理</h1><hr>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>层次名称</th>\n<th>协议举例</th>\n<th>协议分组名称</th>\n<th>主要功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>应用层</td>\n<td>HTTP/SMTP/FTP/DNS/RIP/BGP</td>\n<td>报文</td>\n<td>直接为用户的应用进程提供服务</td>\n</tr>\n<tr>\n<td>运输层</td>\n<td>TCP/UDP</td>\n<td>报文段(TCP), 数据报(UDP)</td>\n<td>两个主机中进程间通信/复用和分用/差错检测</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP/ICMP/OSPF</td>\n<td>数据报</td>\n<td>两个主机间通信(转发)，路由选路功能(选路)</td>\n</tr>\n<tr>\n<td>链路层</td>\n<td>以太网/PPP/IEEE 802.1Q/802.3</td>\n<td>帧</td>\n<td>物理链路上两个相邻节点通信/差错检测纠正</td>\n</tr>\n<tr>\n<td>物理层</td>\n<td>10BASE-T/10BASE2/10BASE5</td>\n<td>比特流</td>\n<td>透明地传送比特流</td>\n</tr>\n</tbody>\n</table>\n</div>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0s106c000085oo4bbzofxeu","category_id":"cl0s106bx00045oo401ufa2qu","_id":"cl0s106c1000a5oo4hvsbgvuj"},{"post_id":"cl0s106bt00015oo40eb28wmm","category_id":"cl0s106bx00045oo401ufa2qu","_id":"cl0s106c1000c5oo4hc2894tp"},{"post_id":"cl0s106c6000n5oo4h7jq4jek","category_id":"cl0s106c8000p5oo47hulgdrt","_id":"cl0s106c9000v5oo4awrf23cg"},{"post_id":"cl0s106c6000o5oo49y2a1o6w","category_id":"cl0s106c8000r5oo481lu9oso","_id":"cl0s106c9000y5oo44fl3fubw"}],"PostTag":[{"post_id":"cl0s106bt00015oo40eb28wmm","tag_id":"cl0s106by00055oo4ah732elb","_id":"cl0s106c3000f5oo44in99zeq"},{"post_id":"cl0s106bt00015oo40eb28wmm","tag_id":"cl0s106c100095oo453qehc1m","_id":"cl0s106c3000g5oo472jybub0"},{"post_id":"cl0s106bt00015oo40eb28wmm","tag_id":"cl0s106c1000b5oo45r8o1p8h","_id":"cl0s106c4000i5oo415bzgm15"},{"post_id":"cl0s106bt00015oo40eb28wmm","tag_id":"cl0s106c2000d5oo4br5o24hu","_id":"cl0s106c4000j5oo44pqb7egp"},{"post_id":"cl0s106c000085oo4bbzofxeu","tag_id":"cl0s106by00055oo4ah732elb","_id":"cl0s106c4000k5oo4euxlabtv"},{"post_id":"cl0s106c000085oo4bbzofxeu","tag_id":"cl0s106c1000b5oo45r8o1p8h","_id":"cl0s106c4000l5oo47o7w62ee"},{"post_id":"cl0s106c000085oo4bbzofxeu","tag_id":"cl0s106c2000d5oo4br5o24hu","_id":"cl0s106c4000m5oo488791ysd"},{"post_id":"cl0s106c6000n5oo4h7jq4jek","tag_id":"cl0s106by00055oo4ah732elb","_id":"cl0s106c9000t5oo41b928w2r"},{"post_id":"cl0s106c6000n5oo4h7jq4jek","tag_id":"cl0s106c8000q5oo4b9502fcx","_id":"cl0s106c9000u5oo45b2pdjkb"},{"post_id":"cl0s106c6000n5oo4h7jq4jek","tag_id":"cl0s106c2000d5oo4br5o24hu","_id":"cl0s106c9000w5oo49re19ag2"},{"post_id":"cl0s106c6000o5oo49y2a1o6w","tag_id":"cl0s106by00055oo4ah732elb","_id":"cl0s106c9000x5oo42ehldt19"},{"post_id":"cl0s106c6000o5oo49y2a1o6w","tag_id":"cl0s106c8000s5oo44unianu8","_id":"cl0s106ca000z5oo40qhe9qm5"},{"post_id":"cl0s106c6000o5oo49y2a1o6w","tag_id":"cl0s106c2000d5oo4br5o24hu","_id":"cl0s106ca00105oo4gtzdhgsz"}],"Tag":[{"name":"CN","_id":"cl0s106by00055oo4ah732elb"},{"name":"C++","_id":"cl0s106c100095oo453qehc1m"},{"name":"算法","_id":"cl0s106c1000b5oo45r8o1p8h"},{"name":"知识整理","_id":"cl0s106c2000d5oo4br5o24hu"},{"name":"编译原理","_id":"cl0s106c8000q5oo4b9502fcx"},{"name":"计算机网络","_id":"cl0s106c8000s5oo44unianu8"}]}}